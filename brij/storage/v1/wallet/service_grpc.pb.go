// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: brij/storage/v1/wallet/service.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_GetPartnerInfo_FullMethodName           = "/brij.storage.v1.wallet.WalletService/GetPartnerInfo"
	WalletService_InitStorage_FullMethodName              = "/brij.storage.v1.wallet.WalletService/InitStorage"
	WalletService_GetInfo_FullMethodName                  = "/brij.storage.v1.wallet.WalletService/GetInfo"
	WalletService_GetGrantedAccessPartners_FullMethodName = "/brij.storage.v1.wallet.WalletService/GetGrantedAccessPartners"
	WalletService_GrantAccess_FullMethodName              = "/brij.storage.v1.wallet.WalletService/GrantAccess"
	WalletService_SetUserData_FullMethodName              = "/brij.storage.v1.wallet.WalletService/SetUserData"
	WalletService_RemoveUserData_FullMethodName           = "/brij.storage.v1.wallet.WalletService/RemoveUserData"
	WalletService_RevokeAccess_FullMethodName             = "/brij.storage.v1.wallet.WalletService/RevokeAccess"
	WalletService_RemoveAllUserData_FullMethodName        = "/brij.storage.v1.wallet.WalletService/RemoveAllUserData"
	WalletService_GetUserData_FullMethodName              = "/brij.storage.v1.wallet.WalletService/GetUserData"
	WalletService_CheckAccess_FullMethodName              = "/brij.storage.v1.wallet.WalletService/CheckAccess"
	WalletService_GetKycStatus_FullMethodName             = "/brij.storage.v1.wallet.WalletService/GetKycStatus"
	WalletService_GetWalletProof_FullMethodName           = "/brij.storage.v1.wallet.WalletService/GetWalletProof"
	WalletService_GetSeedMessage_FullMethodName           = "/brij.storage.v1.wallet.WalletService/GetSeedMessage"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetPartnerInfo(ctx context.Context, in *GetPartnerInfoRequest, opts ...grpc.CallOption) (*GetPartnerInfoResponse, error)
	InitStorage(ctx context.Context, in *InitStorageRequest, opts ...grpc.CallOption) (*InitStorageResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	GetGrantedAccessPartners(ctx context.Context, in *GetGrantedAccessPartnersRequest, opts ...grpc.CallOption) (*GetGrantedAccessPartnersResponse, error)
	GrantAccess(ctx context.Context, in *GrantAccessRequest, opts ...grpc.CallOption) (*GrantAccessResponse, error)
	SetUserData(ctx context.Context, in *SetUserDataRequest, opts ...grpc.CallOption) (*SetUserDataResponse, error)
	RemoveUserData(ctx context.Context, in *RemoveUserDataRequest, opts ...grpc.CallOption) (*RemoveUserDataResponse, error)
	RevokeAccess(ctx context.Context, in *RevokeAccessRequest, opts ...grpc.CallOption) (*RevokeAccessResponse, error)
	RemoveAllUserData(ctx context.Context, in *RemoveAllUserDataRequest, opts ...grpc.CallOption) (*RemoveAllUserDataResponse, error)
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error)
	GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error)
	GetWalletProof(ctx context.Context, in *GetWalletProofRequest, opts ...grpc.CallOption) (*GetWalletProofResponse, error)
	GetSeedMessage(ctx context.Context, in *GetSeedMessageRequest, opts ...grpc.CallOption) (*GetSeedMessageResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetPartnerInfo(ctx context.Context, in *GetPartnerInfoRequest, opts ...grpc.CallOption) (*GetPartnerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPartnerInfoResponse)
	err := c.cc.Invoke(ctx, WalletService_GetPartnerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) InitStorage(ctx context.Context, in *InitStorageRequest, opts ...grpc.CallOption) (*InitStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitStorageResponse)
	err := c.cc.Invoke(ctx, WalletService_InitStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, WalletService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetGrantedAccessPartners(ctx context.Context, in *GetGrantedAccessPartnersRequest, opts ...grpc.CallOption) (*GetGrantedAccessPartnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGrantedAccessPartnersResponse)
	err := c.cc.Invoke(ctx, WalletService_GetGrantedAccessPartners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GrantAccess(ctx context.Context, in *GrantAccessRequest, opts ...grpc.CallOption) (*GrantAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantAccessResponse)
	err := c.cc.Invoke(ctx, WalletService_GrantAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SetUserData(ctx context.Context, in *SetUserDataRequest, opts ...grpc.CallOption) (*SetUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserDataResponse)
	err := c.cc.Invoke(ctx, WalletService_SetUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RemoveUserData(ctx context.Context, in *RemoveUserDataRequest, opts ...grpc.CallOption) (*RemoveUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserDataResponse)
	err := c.cc.Invoke(ctx, WalletService_RemoveUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RevokeAccess(ctx context.Context, in *RevokeAccessRequest, opts ...grpc.CallOption) (*RevokeAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeAccessResponse)
	err := c.cc.Invoke(ctx, WalletService_RevokeAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RemoveAllUserData(ctx context.Context, in *RemoveAllUserDataRequest, opts ...grpc.CallOption) (*RemoveAllUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAllUserDataResponse)
	err := c.cc.Invoke(ctx, WalletService_RemoveAllUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, WalletService_GetUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CheckAccess(ctx context.Context, in *CheckAccessRequest, opts ...grpc.CallOption) (*CheckAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAccessResponse)
	err := c.cc.Invoke(ctx, WalletService_CheckAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKycStatusResponse)
	err := c.cc.Invoke(ctx, WalletService_GetKycStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletProof(ctx context.Context, in *GetWalletProofRequest, opts ...grpc.CallOption) (*GetWalletProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletProofResponse)
	err := c.cc.Invoke(ctx, WalletService_GetWalletProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetSeedMessage(ctx context.Context, in *GetSeedMessageRequest, opts ...grpc.CallOption) (*GetSeedMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeedMessageResponse)
	err := c.cc.Invoke(ctx, WalletService_GetSeedMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	GetPartnerInfo(context.Context, *GetPartnerInfoRequest) (*GetPartnerInfoResponse, error)
	InitStorage(context.Context, *InitStorageRequest) (*InitStorageResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	GetGrantedAccessPartners(context.Context, *GetGrantedAccessPartnersRequest) (*GetGrantedAccessPartnersResponse, error)
	GrantAccess(context.Context, *GrantAccessRequest) (*GrantAccessResponse, error)
	SetUserData(context.Context, *SetUserDataRequest) (*SetUserDataResponse, error)
	RemoveUserData(context.Context, *RemoveUserDataRequest) (*RemoveUserDataResponse, error)
	RevokeAccess(context.Context, *RevokeAccessRequest) (*RevokeAccessResponse, error)
	RemoveAllUserData(context.Context, *RemoveAllUserDataRequest) (*RemoveAllUserDataResponse, error)
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	CheckAccess(context.Context, *CheckAccessRequest) (*CheckAccessResponse, error)
	GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error)
	GetWalletProof(context.Context, *GetWalletProofRequest) (*GetWalletProofResponse, error)
	GetSeedMessage(context.Context, *GetSeedMessageRequest) (*GetSeedMessageResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) GetPartnerInfo(context.Context, *GetPartnerInfoRequest) (*GetPartnerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnerInfo not implemented")
}
func (UnimplementedWalletServiceServer) InitStorage(context.Context, *InitStorageRequest) (*InitStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitStorage not implemented")
}
func (UnimplementedWalletServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedWalletServiceServer) GetGrantedAccessPartners(context.Context, *GetGrantedAccessPartnersRequest) (*GetGrantedAccessPartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrantedAccessPartners not implemented")
}
func (UnimplementedWalletServiceServer) GrantAccess(context.Context, *GrantAccessRequest) (*GrantAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccess not implemented")
}
func (UnimplementedWalletServiceServer) SetUserData(context.Context, *SetUserDataRequest) (*SetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserData not implemented")
}
func (UnimplementedWalletServiceServer) RemoveUserData(context.Context, *RemoveUserDataRequest) (*RemoveUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserData not implemented")
}
func (UnimplementedWalletServiceServer) RevokeAccess(context.Context, *RevokeAccessRequest) (*RevokeAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccess not implemented")
}
func (UnimplementedWalletServiceServer) RemoveAllUserData(context.Context, *RemoveAllUserDataRequest) (*RemoveAllUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllUserData not implemented")
}
func (UnimplementedWalletServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedWalletServiceServer) CheckAccess(context.Context, *CheckAccessRequest) (*CheckAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccess not implemented")
}
func (UnimplementedWalletServiceServer) GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycStatus not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletProof(context.Context, *GetWalletProofRequest) (*GetWalletProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletProof not implemented")
}
func (UnimplementedWalletServiceServer) GetSeedMessage(context.Context, *GetSeedMessageRequest) (*GetSeedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeedMessage not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GetPartnerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetPartnerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetPartnerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetPartnerInfo(ctx, req.(*GetPartnerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_InitStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).InitStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_InitStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).InitStorage(ctx, req.(*InitStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetGrantedAccessPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGrantedAccessPartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetGrantedAccessPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetGrantedAccessPartners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetGrantedAccessPartners(ctx, req.(*GetGrantedAccessPartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GrantAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GrantAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GrantAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GrantAccess(ctx, req.(*GrantAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_SetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SetUserData(ctx, req.(*SetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RemoveUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RemoveUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_RemoveUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RemoveUserData(ctx, req.(*RemoveUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RevokeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RevokeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_RevokeAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RevokeAccess(ctx, req.(*RevokeAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RemoveAllUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RemoveAllUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_RemoveAllUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RemoveAllUserData(ctx, req.(*RemoveAllUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CheckAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CheckAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CheckAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CheckAccess(ctx, req.(*CheckAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetKycStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetKycStatus(ctx, req.(*GetKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletProof(ctx, req.(*GetWalletProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetSeedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetSeedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetSeedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetSeedMessage(ctx, req.(*GetSeedMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brij.storage.v1.wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartnerInfo",
			Handler:    _WalletService_GetPartnerInfo_Handler,
		},
		{
			MethodName: "InitStorage",
			Handler:    _WalletService_InitStorage_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _WalletService_GetInfo_Handler,
		},
		{
			MethodName: "GetGrantedAccessPartners",
			Handler:    _WalletService_GetGrantedAccessPartners_Handler,
		},
		{
			MethodName: "GrantAccess",
			Handler:    _WalletService_GrantAccess_Handler,
		},
		{
			MethodName: "SetUserData",
			Handler:    _WalletService_SetUserData_Handler,
		},
		{
			MethodName: "RemoveUserData",
			Handler:    _WalletService_RemoveUserData_Handler,
		},
		{
			MethodName: "RevokeAccess",
			Handler:    _WalletService_RevokeAccess_Handler,
		},
		{
			MethodName: "RemoveAllUserData",
			Handler:    _WalletService_RemoveAllUserData_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _WalletService_GetUserData_Handler,
		},
		{
			MethodName: "CheckAccess",
			Handler:    _WalletService_CheckAccess_Handler,
		},
		{
			MethodName: "GetKycStatus",
			Handler:    _WalletService_GetKycStatus_Handler,
		},
		{
			MethodName: "GetWalletProof",
			Handler:    _WalletService_GetWalletProof_Handler,
		},
		{
			MethodName: "GetSeedMessage",
			Handler:    _WalletService_GetSeedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brij/storage/v1/wallet/service.proto",
}
