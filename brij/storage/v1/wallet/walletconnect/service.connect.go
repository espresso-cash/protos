// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/storage/v1/wallet/service.proto

package walletconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	wallet "go.brij.fi/protos/brij/storage/v1/wallet"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "brij.storage.v1.wallet.WalletService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WalletServiceGetPartnerInfoProcedure is the fully-qualified name of the WalletService's
	// GetPartnerInfo RPC.
	WalletServiceGetPartnerInfoProcedure = "/brij.storage.v1.wallet.WalletService/GetPartnerInfo"
	// WalletServiceInitStorageProcedure is the fully-qualified name of the WalletService's InitStorage
	// RPC.
	WalletServiceInitStorageProcedure = "/brij.storage.v1.wallet.WalletService/InitStorage"
	// WalletServiceGetInfoProcedure is the fully-qualified name of the WalletService's GetInfo RPC.
	WalletServiceGetInfoProcedure = "/brij.storage.v1.wallet.WalletService/GetInfo"
	// WalletServiceGetGrantedAccessPartnersProcedure is the fully-qualified name of the WalletService's
	// GetGrantedAccessPartners RPC.
	WalletServiceGetGrantedAccessPartnersProcedure = "/brij.storage.v1.wallet.WalletService/GetGrantedAccessPartners"
	// WalletServiceGrantAccessProcedure is the fully-qualified name of the WalletService's GrantAccess
	// RPC.
	WalletServiceGrantAccessProcedure = "/brij.storage.v1.wallet.WalletService/GrantAccess"
	// WalletServiceSetUserDataProcedure is the fully-qualified name of the WalletService's SetUserData
	// RPC.
	WalletServiceSetUserDataProcedure = "/brij.storage.v1.wallet.WalletService/SetUserData"
	// WalletServiceRemoveUserDataProcedure is the fully-qualified name of the WalletService's
	// RemoveUserData RPC.
	WalletServiceRemoveUserDataProcedure = "/brij.storage.v1.wallet.WalletService/RemoveUserData"
	// WalletServiceRevokeAccessProcedure is the fully-qualified name of the WalletService's
	// RevokeAccess RPC.
	WalletServiceRevokeAccessProcedure = "/brij.storage.v1.wallet.WalletService/RevokeAccess"
	// WalletServiceRemoveAllUserDataProcedure is the fully-qualified name of the WalletService's
	// RemoveAllUserData RPC.
	WalletServiceRemoveAllUserDataProcedure = "/brij.storage.v1.wallet.WalletService/RemoveAllUserData"
	// WalletServiceGetUserDataProcedure is the fully-qualified name of the WalletService's GetUserData
	// RPC.
	WalletServiceGetUserDataProcedure = "/brij.storage.v1.wallet.WalletService/GetUserData"
	// WalletServiceCheckAccessProcedure is the fully-qualified name of the WalletService's CheckAccess
	// RPC.
	WalletServiceCheckAccessProcedure = "/brij.storage.v1.wallet.WalletService/CheckAccess"
	// WalletServiceGetKycStatusProcedure is the fully-qualified name of the WalletService's
	// GetKycStatus RPC.
	WalletServiceGetKycStatusProcedure = "/brij.storage.v1.wallet.WalletService/GetKycStatus"
	// WalletServiceGetWalletProofProcedure is the fully-qualified name of the WalletService's
	// GetWalletProof RPC.
	WalletServiceGetWalletProofProcedure = "/brij.storage.v1.wallet.WalletService/GetWalletProof"
	// WalletServiceGetSeedMessageProcedure is the fully-qualified name of the WalletService's
	// GetSeedMessage RPC.
	WalletServiceGetSeedMessageProcedure = "/brij.storage.v1.wallet.WalletService/GetSeedMessage"
)

// WalletServiceClient is a client for the brij.storage.v1.wallet.WalletService service.
type WalletServiceClient interface {
	GetPartnerInfo(context.Context, *connect_go.Request[wallet.GetPartnerInfoRequest]) (*connect_go.Response[wallet.GetPartnerInfoResponse], error)
	InitStorage(context.Context, *connect_go.Request[wallet.InitStorageRequest]) (*connect_go.Response[wallet.InitStorageResponse], error)
	GetInfo(context.Context, *connect_go.Request[wallet.GetInfoRequest]) (*connect_go.Response[wallet.GetInfoResponse], error)
	GetGrantedAccessPartners(context.Context, *connect_go.Request[wallet.GetGrantedAccessPartnersRequest]) (*connect_go.Response[wallet.GetGrantedAccessPartnersResponse], error)
	GrantAccess(context.Context, *connect_go.Request[wallet.GrantAccessRequest]) (*connect_go.Response[wallet.GrantAccessResponse], error)
	SetUserData(context.Context, *connect_go.Request[wallet.SetUserDataRequest]) (*connect_go.Response[wallet.SetUserDataResponse], error)
	RemoveUserData(context.Context, *connect_go.Request[wallet.RemoveUserDataRequest]) (*connect_go.Response[wallet.RemoveUserDataResponse], error)
	RevokeAccess(context.Context, *connect_go.Request[wallet.RevokeAccessRequest]) (*connect_go.Response[wallet.RevokeAccessResponse], error)
	RemoveAllUserData(context.Context, *connect_go.Request[wallet.RemoveAllUserDataRequest]) (*connect_go.Response[wallet.RemoveAllUserDataResponse], error)
	GetUserData(context.Context, *connect_go.Request[wallet.GetUserDataRequest]) (*connect_go.Response[wallet.GetUserDataResponse], error)
	CheckAccess(context.Context, *connect_go.Request[wallet.CheckAccessRequest]) (*connect_go.Response[wallet.CheckAccessResponse], error)
	GetKycStatus(context.Context, *connect_go.Request[wallet.GetKycStatusRequest]) (*connect_go.Response[wallet.GetKycStatusResponse], error)
	GetWalletProof(context.Context, *connect_go.Request[wallet.GetWalletProofRequest]) (*connect_go.Response[wallet.GetWalletProofResponse], error)
	GetSeedMessage(context.Context, *connect_go.Request[wallet.GetSeedMessageRequest]) (*connect_go.Response[wallet.GetSeedMessageResponse], error)
}

// NewWalletServiceClient constructs a client for the brij.storage.v1.wallet.WalletService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &walletServiceClient{
		getPartnerInfo: connect_go.NewClient[wallet.GetPartnerInfoRequest, wallet.GetPartnerInfoResponse](
			httpClient,
			baseURL+WalletServiceGetPartnerInfoProcedure,
			opts...,
		),
		initStorage: connect_go.NewClient[wallet.InitStorageRequest, wallet.InitStorageResponse](
			httpClient,
			baseURL+WalletServiceInitStorageProcedure,
			opts...,
		),
		getInfo: connect_go.NewClient[wallet.GetInfoRequest, wallet.GetInfoResponse](
			httpClient,
			baseURL+WalletServiceGetInfoProcedure,
			opts...,
		),
		getGrantedAccessPartners: connect_go.NewClient[wallet.GetGrantedAccessPartnersRequest, wallet.GetGrantedAccessPartnersResponse](
			httpClient,
			baseURL+WalletServiceGetGrantedAccessPartnersProcedure,
			opts...,
		),
		grantAccess: connect_go.NewClient[wallet.GrantAccessRequest, wallet.GrantAccessResponse](
			httpClient,
			baseURL+WalletServiceGrantAccessProcedure,
			opts...,
		),
		setUserData: connect_go.NewClient[wallet.SetUserDataRequest, wallet.SetUserDataResponse](
			httpClient,
			baseURL+WalletServiceSetUserDataProcedure,
			opts...,
		),
		removeUserData: connect_go.NewClient[wallet.RemoveUserDataRequest, wallet.RemoveUserDataResponse](
			httpClient,
			baseURL+WalletServiceRemoveUserDataProcedure,
			opts...,
		),
		revokeAccess: connect_go.NewClient[wallet.RevokeAccessRequest, wallet.RevokeAccessResponse](
			httpClient,
			baseURL+WalletServiceRevokeAccessProcedure,
			opts...,
		),
		removeAllUserData: connect_go.NewClient[wallet.RemoveAllUserDataRequest, wallet.RemoveAllUserDataResponse](
			httpClient,
			baseURL+WalletServiceRemoveAllUserDataProcedure,
			opts...,
		),
		getUserData: connect_go.NewClient[wallet.GetUserDataRequest, wallet.GetUserDataResponse](
			httpClient,
			baseURL+WalletServiceGetUserDataProcedure,
			opts...,
		),
		checkAccess: connect_go.NewClient[wallet.CheckAccessRequest, wallet.CheckAccessResponse](
			httpClient,
			baseURL+WalletServiceCheckAccessProcedure,
			opts...,
		),
		getKycStatus: connect_go.NewClient[wallet.GetKycStatusRequest, wallet.GetKycStatusResponse](
			httpClient,
			baseURL+WalletServiceGetKycStatusProcedure,
			opts...,
		),
		getWalletProof: connect_go.NewClient[wallet.GetWalletProofRequest, wallet.GetWalletProofResponse](
			httpClient,
			baseURL+WalletServiceGetWalletProofProcedure,
			opts...,
		),
		getSeedMessage: connect_go.NewClient[wallet.GetSeedMessageRequest, wallet.GetSeedMessageResponse](
			httpClient,
			baseURL+WalletServiceGetSeedMessageProcedure,
			opts...,
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	getPartnerInfo           *connect_go.Client[wallet.GetPartnerInfoRequest, wallet.GetPartnerInfoResponse]
	initStorage              *connect_go.Client[wallet.InitStorageRequest, wallet.InitStorageResponse]
	getInfo                  *connect_go.Client[wallet.GetInfoRequest, wallet.GetInfoResponse]
	getGrantedAccessPartners *connect_go.Client[wallet.GetGrantedAccessPartnersRequest, wallet.GetGrantedAccessPartnersResponse]
	grantAccess              *connect_go.Client[wallet.GrantAccessRequest, wallet.GrantAccessResponse]
	setUserData              *connect_go.Client[wallet.SetUserDataRequest, wallet.SetUserDataResponse]
	removeUserData           *connect_go.Client[wallet.RemoveUserDataRequest, wallet.RemoveUserDataResponse]
	revokeAccess             *connect_go.Client[wallet.RevokeAccessRequest, wallet.RevokeAccessResponse]
	removeAllUserData        *connect_go.Client[wallet.RemoveAllUserDataRequest, wallet.RemoveAllUserDataResponse]
	getUserData              *connect_go.Client[wallet.GetUserDataRequest, wallet.GetUserDataResponse]
	checkAccess              *connect_go.Client[wallet.CheckAccessRequest, wallet.CheckAccessResponse]
	getKycStatus             *connect_go.Client[wallet.GetKycStatusRequest, wallet.GetKycStatusResponse]
	getWalletProof           *connect_go.Client[wallet.GetWalletProofRequest, wallet.GetWalletProofResponse]
	getSeedMessage           *connect_go.Client[wallet.GetSeedMessageRequest, wallet.GetSeedMessageResponse]
}

// GetPartnerInfo calls brij.storage.v1.wallet.WalletService.GetPartnerInfo.
func (c *walletServiceClient) GetPartnerInfo(ctx context.Context, req *connect_go.Request[wallet.GetPartnerInfoRequest]) (*connect_go.Response[wallet.GetPartnerInfoResponse], error) {
	return c.getPartnerInfo.CallUnary(ctx, req)
}

// InitStorage calls brij.storage.v1.wallet.WalletService.InitStorage.
func (c *walletServiceClient) InitStorage(ctx context.Context, req *connect_go.Request[wallet.InitStorageRequest]) (*connect_go.Response[wallet.InitStorageResponse], error) {
	return c.initStorage.CallUnary(ctx, req)
}

// GetInfo calls brij.storage.v1.wallet.WalletService.GetInfo.
func (c *walletServiceClient) GetInfo(ctx context.Context, req *connect_go.Request[wallet.GetInfoRequest]) (*connect_go.Response[wallet.GetInfoResponse], error) {
	return c.getInfo.CallUnary(ctx, req)
}

// GetGrantedAccessPartners calls brij.storage.v1.wallet.WalletService.GetGrantedAccessPartners.
func (c *walletServiceClient) GetGrantedAccessPartners(ctx context.Context, req *connect_go.Request[wallet.GetGrantedAccessPartnersRequest]) (*connect_go.Response[wallet.GetGrantedAccessPartnersResponse], error) {
	return c.getGrantedAccessPartners.CallUnary(ctx, req)
}

// GrantAccess calls brij.storage.v1.wallet.WalletService.GrantAccess.
func (c *walletServiceClient) GrantAccess(ctx context.Context, req *connect_go.Request[wallet.GrantAccessRequest]) (*connect_go.Response[wallet.GrantAccessResponse], error) {
	return c.grantAccess.CallUnary(ctx, req)
}

// SetUserData calls brij.storage.v1.wallet.WalletService.SetUserData.
func (c *walletServiceClient) SetUserData(ctx context.Context, req *connect_go.Request[wallet.SetUserDataRequest]) (*connect_go.Response[wallet.SetUserDataResponse], error) {
	return c.setUserData.CallUnary(ctx, req)
}

// RemoveUserData calls brij.storage.v1.wallet.WalletService.RemoveUserData.
func (c *walletServiceClient) RemoveUserData(ctx context.Context, req *connect_go.Request[wallet.RemoveUserDataRequest]) (*connect_go.Response[wallet.RemoveUserDataResponse], error) {
	return c.removeUserData.CallUnary(ctx, req)
}

// RevokeAccess calls brij.storage.v1.wallet.WalletService.RevokeAccess.
func (c *walletServiceClient) RevokeAccess(ctx context.Context, req *connect_go.Request[wallet.RevokeAccessRequest]) (*connect_go.Response[wallet.RevokeAccessResponse], error) {
	return c.revokeAccess.CallUnary(ctx, req)
}

// RemoveAllUserData calls brij.storage.v1.wallet.WalletService.RemoveAllUserData.
func (c *walletServiceClient) RemoveAllUserData(ctx context.Context, req *connect_go.Request[wallet.RemoveAllUserDataRequest]) (*connect_go.Response[wallet.RemoveAllUserDataResponse], error) {
	return c.removeAllUserData.CallUnary(ctx, req)
}

// GetUserData calls brij.storage.v1.wallet.WalletService.GetUserData.
func (c *walletServiceClient) GetUserData(ctx context.Context, req *connect_go.Request[wallet.GetUserDataRequest]) (*connect_go.Response[wallet.GetUserDataResponse], error) {
	return c.getUserData.CallUnary(ctx, req)
}

// CheckAccess calls brij.storage.v1.wallet.WalletService.CheckAccess.
func (c *walletServiceClient) CheckAccess(ctx context.Context, req *connect_go.Request[wallet.CheckAccessRequest]) (*connect_go.Response[wallet.CheckAccessResponse], error) {
	return c.checkAccess.CallUnary(ctx, req)
}

// GetKycStatus calls brij.storage.v1.wallet.WalletService.GetKycStatus.
func (c *walletServiceClient) GetKycStatus(ctx context.Context, req *connect_go.Request[wallet.GetKycStatusRequest]) (*connect_go.Response[wallet.GetKycStatusResponse], error) {
	return c.getKycStatus.CallUnary(ctx, req)
}

// GetWalletProof calls brij.storage.v1.wallet.WalletService.GetWalletProof.
func (c *walletServiceClient) GetWalletProof(ctx context.Context, req *connect_go.Request[wallet.GetWalletProofRequest]) (*connect_go.Response[wallet.GetWalletProofResponse], error) {
	return c.getWalletProof.CallUnary(ctx, req)
}

// GetSeedMessage calls brij.storage.v1.wallet.WalletService.GetSeedMessage.
func (c *walletServiceClient) GetSeedMessage(ctx context.Context, req *connect_go.Request[wallet.GetSeedMessageRequest]) (*connect_go.Response[wallet.GetSeedMessageResponse], error) {
	return c.getSeedMessage.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the brij.storage.v1.wallet.WalletService service.
type WalletServiceHandler interface {
	GetPartnerInfo(context.Context, *connect_go.Request[wallet.GetPartnerInfoRequest]) (*connect_go.Response[wallet.GetPartnerInfoResponse], error)
	InitStorage(context.Context, *connect_go.Request[wallet.InitStorageRequest]) (*connect_go.Response[wallet.InitStorageResponse], error)
	GetInfo(context.Context, *connect_go.Request[wallet.GetInfoRequest]) (*connect_go.Response[wallet.GetInfoResponse], error)
	GetGrantedAccessPartners(context.Context, *connect_go.Request[wallet.GetGrantedAccessPartnersRequest]) (*connect_go.Response[wallet.GetGrantedAccessPartnersResponse], error)
	GrantAccess(context.Context, *connect_go.Request[wallet.GrantAccessRequest]) (*connect_go.Response[wallet.GrantAccessResponse], error)
	SetUserData(context.Context, *connect_go.Request[wallet.SetUserDataRequest]) (*connect_go.Response[wallet.SetUserDataResponse], error)
	RemoveUserData(context.Context, *connect_go.Request[wallet.RemoveUserDataRequest]) (*connect_go.Response[wallet.RemoveUserDataResponse], error)
	RevokeAccess(context.Context, *connect_go.Request[wallet.RevokeAccessRequest]) (*connect_go.Response[wallet.RevokeAccessResponse], error)
	RemoveAllUserData(context.Context, *connect_go.Request[wallet.RemoveAllUserDataRequest]) (*connect_go.Response[wallet.RemoveAllUserDataResponse], error)
	GetUserData(context.Context, *connect_go.Request[wallet.GetUserDataRequest]) (*connect_go.Response[wallet.GetUserDataResponse], error)
	CheckAccess(context.Context, *connect_go.Request[wallet.CheckAccessRequest]) (*connect_go.Response[wallet.CheckAccessResponse], error)
	GetKycStatus(context.Context, *connect_go.Request[wallet.GetKycStatusRequest]) (*connect_go.Response[wallet.GetKycStatusResponse], error)
	GetWalletProof(context.Context, *connect_go.Request[wallet.GetWalletProofRequest]) (*connect_go.Response[wallet.GetWalletProofResponse], error)
	GetSeedMessage(context.Context, *connect_go.Request[wallet.GetSeedMessageRequest]) (*connect_go.Response[wallet.GetSeedMessageResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	walletServiceGetPartnerInfoHandler := connect_go.NewUnaryHandler(
		WalletServiceGetPartnerInfoProcedure,
		svc.GetPartnerInfo,
		opts...,
	)
	walletServiceInitStorageHandler := connect_go.NewUnaryHandler(
		WalletServiceInitStorageProcedure,
		svc.InitStorage,
		opts...,
	)
	walletServiceGetInfoHandler := connect_go.NewUnaryHandler(
		WalletServiceGetInfoProcedure,
		svc.GetInfo,
		opts...,
	)
	walletServiceGetGrantedAccessPartnersHandler := connect_go.NewUnaryHandler(
		WalletServiceGetGrantedAccessPartnersProcedure,
		svc.GetGrantedAccessPartners,
		opts...,
	)
	walletServiceGrantAccessHandler := connect_go.NewUnaryHandler(
		WalletServiceGrantAccessProcedure,
		svc.GrantAccess,
		opts...,
	)
	walletServiceSetUserDataHandler := connect_go.NewUnaryHandler(
		WalletServiceSetUserDataProcedure,
		svc.SetUserData,
		opts...,
	)
	walletServiceRemoveUserDataHandler := connect_go.NewUnaryHandler(
		WalletServiceRemoveUserDataProcedure,
		svc.RemoveUserData,
		opts...,
	)
	walletServiceRevokeAccessHandler := connect_go.NewUnaryHandler(
		WalletServiceRevokeAccessProcedure,
		svc.RevokeAccess,
		opts...,
	)
	walletServiceRemoveAllUserDataHandler := connect_go.NewUnaryHandler(
		WalletServiceRemoveAllUserDataProcedure,
		svc.RemoveAllUserData,
		opts...,
	)
	walletServiceGetUserDataHandler := connect_go.NewUnaryHandler(
		WalletServiceGetUserDataProcedure,
		svc.GetUserData,
		opts...,
	)
	walletServiceCheckAccessHandler := connect_go.NewUnaryHandler(
		WalletServiceCheckAccessProcedure,
		svc.CheckAccess,
		opts...,
	)
	walletServiceGetKycStatusHandler := connect_go.NewUnaryHandler(
		WalletServiceGetKycStatusProcedure,
		svc.GetKycStatus,
		opts...,
	)
	walletServiceGetWalletProofHandler := connect_go.NewUnaryHandler(
		WalletServiceGetWalletProofProcedure,
		svc.GetWalletProof,
		opts...,
	)
	walletServiceGetSeedMessageHandler := connect_go.NewUnaryHandler(
		WalletServiceGetSeedMessageProcedure,
		svc.GetSeedMessage,
		opts...,
	)
	return "/brij.storage.v1.wallet.WalletService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WalletServiceGetPartnerInfoProcedure:
			walletServiceGetPartnerInfoHandler.ServeHTTP(w, r)
		case WalletServiceInitStorageProcedure:
			walletServiceInitStorageHandler.ServeHTTP(w, r)
		case WalletServiceGetInfoProcedure:
			walletServiceGetInfoHandler.ServeHTTP(w, r)
		case WalletServiceGetGrantedAccessPartnersProcedure:
			walletServiceGetGrantedAccessPartnersHandler.ServeHTTP(w, r)
		case WalletServiceGrantAccessProcedure:
			walletServiceGrantAccessHandler.ServeHTTP(w, r)
		case WalletServiceSetUserDataProcedure:
			walletServiceSetUserDataHandler.ServeHTTP(w, r)
		case WalletServiceRemoveUserDataProcedure:
			walletServiceRemoveUserDataHandler.ServeHTTP(w, r)
		case WalletServiceRevokeAccessProcedure:
			walletServiceRevokeAccessHandler.ServeHTTP(w, r)
		case WalletServiceRemoveAllUserDataProcedure:
			walletServiceRemoveAllUserDataHandler.ServeHTTP(w, r)
		case WalletServiceGetUserDataProcedure:
			walletServiceGetUserDataHandler.ServeHTTP(w, r)
		case WalletServiceCheckAccessProcedure:
			walletServiceCheckAccessHandler.ServeHTTP(w, r)
		case WalletServiceGetKycStatusProcedure:
			walletServiceGetKycStatusHandler.ServeHTTP(w, r)
		case WalletServiceGetWalletProofProcedure:
			walletServiceGetWalletProofHandler.ServeHTTP(w, r)
		case WalletServiceGetSeedMessageProcedure:
			walletServiceGetSeedMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) GetPartnerInfo(context.Context, *connect_go.Request[wallet.GetPartnerInfoRequest]) (*connect_go.Response[wallet.GetPartnerInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GetPartnerInfo is not implemented"))
}

func (UnimplementedWalletServiceHandler) InitStorage(context.Context, *connect_go.Request[wallet.InitStorageRequest]) (*connect_go.Response[wallet.InitStorageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.InitStorage is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetInfo(context.Context, *connect_go.Request[wallet.GetInfoRequest]) (*connect_go.Response[wallet.GetInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GetInfo is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetGrantedAccessPartners(context.Context, *connect_go.Request[wallet.GetGrantedAccessPartnersRequest]) (*connect_go.Response[wallet.GetGrantedAccessPartnersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GetGrantedAccessPartners is not implemented"))
}

func (UnimplementedWalletServiceHandler) GrantAccess(context.Context, *connect_go.Request[wallet.GrantAccessRequest]) (*connect_go.Response[wallet.GrantAccessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GrantAccess is not implemented"))
}

func (UnimplementedWalletServiceHandler) SetUserData(context.Context, *connect_go.Request[wallet.SetUserDataRequest]) (*connect_go.Response[wallet.SetUserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.SetUserData is not implemented"))
}

func (UnimplementedWalletServiceHandler) RemoveUserData(context.Context, *connect_go.Request[wallet.RemoveUserDataRequest]) (*connect_go.Response[wallet.RemoveUserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.RemoveUserData is not implemented"))
}

func (UnimplementedWalletServiceHandler) RevokeAccess(context.Context, *connect_go.Request[wallet.RevokeAccessRequest]) (*connect_go.Response[wallet.RevokeAccessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.RevokeAccess is not implemented"))
}

func (UnimplementedWalletServiceHandler) RemoveAllUserData(context.Context, *connect_go.Request[wallet.RemoveAllUserDataRequest]) (*connect_go.Response[wallet.RemoveAllUserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.RemoveAllUserData is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetUserData(context.Context, *connect_go.Request[wallet.GetUserDataRequest]) (*connect_go.Response[wallet.GetUserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GetUserData is not implemented"))
}

func (UnimplementedWalletServiceHandler) CheckAccess(context.Context, *connect_go.Request[wallet.CheckAccessRequest]) (*connect_go.Response[wallet.CheckAccessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.CheckAccess is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetKycStatus(context.Context, *connect_go.Request[wallet.GetKycStatusRequest]) (*connect_go.Response[wallet.GetKycStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GetKycStatus is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetWalletProof(context.Context, *connect_go.Request[wallet.GetWalletProofRequest]) (*connect_go.Response[wallet.GetWalletProofResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GetWalletProof is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetSeedMessage(context.Context, *connect_go.Request[wallet.GetSeedMessageRequest]) (*connect_go.Response[wallet.GetSeedMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.storage.v1.wallet.WalletService.GetSeedMessage is not implemented"))
}
