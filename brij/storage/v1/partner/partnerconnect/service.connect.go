// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/storage/v1/partner/service.proto

package partnerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	partner "go.brij.fi/protos/brij/storage/v1/partner"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PartnerServiceName is the fully-qualified name of the PartnerService service.
	PartnerServiceName = "brij.storage.v1.partner.PartnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PartnerServiceGetInfoProcedure is the fully-qualified name of the PartnerService's GetInfo RPC.
	PartnerServiceGetInfoProcedure = "/brij.storage.v1.partner.PartnerService/GetInfo"
	// PartnerServiceGetUserDataProcedure is the fully-qualified name of the PartnerService's
	// GetUserData RPC.
	PartnerServiceGetUserDataProcedure = "/brij.storage.v1.partner.PartnerService/GetUserData"
	// PartnerServiceSetValidationDataProcedure is the fully-qualified name of the PartnerService's
	// SetValidationData RPC.
	PartnerServiceSetValidationDataProcedure = "/brij.storage.v1.partner.PartnerService/SetValidationData"
	// PartnerServiceRemoveValidationDataProcedure is the fully-qualified name of the PartnerService's
	// RemoveValidationData RPC.
	PartnerServiceRemoveValidationDataProcedure = "/brij.storage.v1.partner.PartnerService/RemoveValidationData"
	// PartnerServiceGetKycStatusProcedure is the fully-qualified name of the PartnerService's
	// GetKycStatus RPC.
	PartnerServiceGetKycStatusProcedure = "/brij.storage.v1.partner.PartnerService/GetKycStatus"
	// PartnerServiceCreateKycStatusProcedure is the fully-qualified name of the PartnerService's
	// CreateKycStatus RPC.
	PartnerServiceCreateKycStatusProcedure = "/brij.storage.v1.partner.PartnerService/CreateKycStatus"
	// PartnerServiceUpdateKycStatusProcedure is the fully-qualified name of the PartnerService's
	// UpdateKycStatus RPC.
	PartnerServiceUpdateKycStatusProcedure = "/brij.storage.v1.partner.PartnerService/UpdateKycStatus"
)

// PartnerServiceClient is a client for the brij.storage.v1.partner.PartnerService service.
type PartnerServiceClient interface {
	GetInfo(context.Context, *connect.Request[partner.GetInfoRequest]) (*connect.Response[partner.GetInfoResponse], error)
	GetUserData(context.Context, *connect.Request[partner.GetUserDataRequest]) (*connect.Response[partner.GetUserDataResponse], error)
	SetValidationData(context.Context, *connect.Request[partner.SetValidationDataRequest]) (*connect.Response[partner.SetValidationDataResponse], error)
	RemoveValidationData(context.Context, *connect.Request[partner.RemoveValidationDataRequest]) (*connect.Response[partner.RemoveValidationDataResponse], error)
	GetKycStatus(context.Context, *connect.Request[partner.GetKycStatusRequest]) (*connect.Response[partner.GetKycStatusResponse], error)
	CreateKycStatus(context.Context, *connect.Request[partner.CreateKycStatusRequest]) (*connect.Response[partner.CreateKycStatusResponse], error)
	UpdateKycStatus(context.Context, *connect.Request[partner.UpdateKycStatusRequest]) (*connect.Response[partner.UpdateKycStatusResponse], error)
}

// NewPartnerServiceClient constructs a client for the brij.storage.v1.partner.PartnerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPartnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PartnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	partnerServiceMethods := partner.File_brij_storage_v1_partner_service_proto.Services().ByName("PartnerService").Methods()
	return &partnerServiceClient{
		getInfo: connect.NewClient[partner.GetInfoRequest, partner.GetInfoResponse](
			httpClient,
			baseURL+PartnerServiceGetInfoProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("GetInfo")),
			connect.WithClientOptions(opts...),
		),
		getUserData: connect.NewClient[partner.GetUserDataRequest, partner.GetUserDataResponse](
			httpClient,
			baseURL+PartnerServiceGetUserDataProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("GetUserData")),
			connect.WithClientOptions(opts...),
		),
		setValidationData: connect.NewClient[partner.SetValidationDataRequest, partner.SetValidationDataResponse](
			httpClient,
			baseURL+PartnerServiceSetValidationDataProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("SetValidationData")),
			connect.WithClientOptions(opts...),
		),
		removeValidationData: connect.NewClient[partner.RemoveValidationDataRequest, partner.RemoveValidationDataResponse](
			httpClient,
			baseURL+PartnerServiceRemoveValidationDataProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("RemoveValidationData")),
			connect.WithClientOptions(opts...),
		),
		getKycStatus: connect.NewClient[partner.GetKycStatusRequest, partner.GetKycStatusResponse](
			httpClient,
			baseURL+PartnerServiceGetKycStatusProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("GetKycStatus")),
			connect.WithClientOptions(opts...),
		),
		createKycStatus: connect.NewClient[partner.CreateKycStatusRequest, partner.CreateKycStatusResponse](
			httpClient,
			baseURL+PartnerServiceCreateKycStatusProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("CreateKycStatus")),
			connect.WithClientOptions(opts...),
		),
		updateKycStatus: connect.NewClient[partner.UpdateKycStatusRequest, partner.UpdateKycStatusResponse](
			httpClient,
			baseURL+PartnerServiceUpdateKycStatusProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("UpdateKycStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// partnerServiceClient implements PartnerServiceClient.
type partnerServiceClient struct {
	getInfo              *connect.Client[partner.GetInfoRequest, partner.GetInfoResponse]
	getUserData          *connect.Client[partner.GetUserDataRequest, partner.GetUserDataResponse]
	setValidationData    *connect.Client[partner.SetValidationDataRequest, partner.SetValidationDataResponse]
	removeValidationData *connect.Client[partner.RemoveValidationDataRequest, partner.RemoveValidationDataResponse]
	getKycStatus         *connect.Client[partner.GetKycStatusRequest, partner.GetKycStatusResponse]
	createKycStatus      *connect.Client[partner.CreateKycStatusRequest, partner.CreateKycStatusResponse]
	updateKycStatus      *connect.Client[partner.UpdateKycStatusRequest, partner.UpdateKycStatusResponse]
}

// GetInfo calls brij.storage.v1.partner.PartnerService.GetInfo.
func (c *partnerServiceClient) GetInfo(ctx context.Context, req *connect.Request[partner.GetInfoRequest]) (*connect.Response[partner.GetInfoResponse], error) {
	return c.getInfo.CallUnary(ctx, req)
}

// GetUserData calls brij.storage.v1.partner.PartnerService.GetUserData.
func (c *partnerServiceClient) GetUserData(ctx context.Context, req *connect.Request[partner.GetUserDataRequest]) (*connect.Response[partner.GetUserDataResponse], error) {
	return c.getUserData.CallUnary(ctx, req)
}

// SetValidationData calls brij.storage.v1.partner.PartnerService.SetValidationData.
func (c *partnerServiceClient) SetValidationData(ctx context.Context, req *connect.Request[partner.SetValidationDataRequest]) (*connect.Response[partner.SetValidationDataResponse], error) {
	return c.setValidationData.CallUnary(ctx, req)
}

// RemoveValidationData calls brij.storage.v1.partner.PartnerService.RemoveValidationData.
func (c *partnerServiceClient) RemoveValidationData(ctx context.Context, req *connect.Request[partner.RemoveValidationDataRequest]) (*connect.Response[partner.RemoveValidationDataResponse], error) {
	return c.removeValidationData.CallUnary(ctx, req)
}

// GetKycStatus calls brij.storage.v1.partner.PartnerService.GetKycStatus.
func (c *partnerServiceClient) GetKycStatus(ctx context.Context, req *connect.Request[partner.GetKycStatusRequest]) (*connect.Response[partner.GetKycStatusResponse], error) {
	return c.getKycStatus.CallUnary(ctx, req)
}

// CreateKycStatus calls brij.storage.v1.partner.PartnerService.CreateKycStatus.
func (c *partnerServiceClient) CreateKycStatus(ctx context.Context, req *connect.Request[partner.CreateKycStatusRequest]) (*connect.Response[partner.CreateKycStatusResponse], error) {
	return c.createKycStatus.CallUnary(ctx, req)
}

// UpdateKycStatus calls brij.storage.v1.partner.PartnerService.UpdateKycStatus.
func (c *partnerServiceClient) UpdateKycStatus(ctx context.Context, req *connect.Request[partner.UpdateKycStatusRequest]) (*connect.Response[partner.UpdateKycStatusResponse], error) {
	return c.updateKycStatus.CallUnary(ctx, req)
}

// PartnerServiceHandler is an implementation of the brij.storage.v1.partner.PartnerService service.
type PartnerServiceHandler interface {
	GetInfo(context.Context, *connect.Request[partner.GetInfoRequest]) (*connect.Response[partner.GetInfoResponse], error)
	GetUserData(context.Context, *connect.Request[partner.GetUserDataRequest]) (*connect.Response[partner.GetUserDataResponse], error)
	SetValidationData(context.Context, *connect.Request[partner.SetValidationDataRequest]) (*connect.Response[partner.SetValidationDataResponse], error)
	RemoveValidationData(context.Context, *connect.Request[partner.RemoveValidationDataRequest]) (*connect.Response[partner.RemoveValidationDataResponse], error)
	GetKycStatus(context.Context, *connect.Request[partner.GetKycStatusRequest]) (*connect.Response[partner.GetKycStatusResponse], error)
	CreateKycStatus(context.Context, *connect.Request[partner.CreateKycStatusRequest]) (*connect.Response[partner.CreateKycStatusResponse], error)
	UpdateKycStatus(context.Context, *connect.Request[partner.UpdateKycStatusRequest]) (*connect.Response[partner.UpdateKycStatusResponse], error)
}

// NewPartnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPartnerServiceHandler(svc PartnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	partnerServiceMethods := partner.File_brij_storage_v1_partner_service_proto.Services().ByName("PartnerService").Methods()
	partnerServiceGetInfoHandler := connect.NewUnaryHandler(
		PartnerServiceGetInfoProcedure,
		svc.GetInfo,
		connect.WithSchema(partnerServiceMethods.ByName("GetInfo")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceGetUserDataHandler := connect.NewUnaryHandler(
		PartnerServiceGetUserDataProcedure,
		svc.GetUserData,
		connect.WithSchema(partnerServiceMethods.ByName("GetUserData")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceSetValidationDataHandler := connect.NewUnaryHandler(
		PartnerServiceSetValidationDataProcedure,
		svc.SetValidationData,
		connect.WithSchema(partnerServiceMethods.ByName("SetValidationData")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceRemoveValidationDataHandler := connect.NewUnaryHandler(
		PartnerServiceRemoveValidationDataProcedure,
		svc.RemoveValidationData,
		connect.WithSchema(partnerServiceMethods.ByName("RemoveValidationData")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceGetKycStatusHandler := connect.NewUnaryHandler(
		PartnerServiceGetKycStatusProcedure,
		svc.GetKycStatus,
		connect.WithSchema(partnerServiceMethods.ByName("GetKycStatus")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceCreateKycStatusHandler := connect.NewUnaryHandler(
		PartnerServiceCreateKycStatusProcedure,
		svc.CreateKycStatus,
		connect.WithSchema(partnerServiceMethods.ByName("CreateKycStatus")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceUpdateKycStatusHandler := connect.NewUnaryHandler(
		PartnerServiceUpdateKycStatusProcedure,
		svc.UpdateKycStatus,
		connect.WithSchema(partnerServiceMethods.ByName("UpdateKycStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/brij.storage.v1.partner.PartnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PartnerServiceGetInfoProcedure:
			partnerServiceGetInfoHandler.ServeHTTP(w, r)
		case PartnerServiceGetUserDataProcedure:
			partnerServiceGetUserDataHandler.ServeHTTP(w, r)
		case PartnerServiceSetValidationDataProcedure:
			partnerServiceSetValidationDataHandler.ServeHTTP(w, r)
		case PartnerServiceRemoveValidationDataProcedure:
			partnerServiceRemoveValidationDataHandler.ServeHTTP(w, r)
		case PartnerServiceGetKycStatusProcedure:
			partnerServiceGetKycStatusHandler.ServeHTTP(w, r)
		case PartnerServiceCreateKycStatusProcedure:
			partnerServiceCreateKycStatusHandler.ServeHTTP(w, r)
		case PartnerServiceUpdateKycStatusProcedure:
			partnerServiceUpdateKycStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPartnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPartnerServiceHandler struct{}

func (UnimplementedPartnerServiceHandler) GetInfo(context.Context, *connect.Request[partner.GetInfoRequest]) (*connect.Response[partner.GetInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.storage.v1.partner.PartnerService.GetInfo is not implemented"))
}

func (UnimplementedPartnerServiceHandler) GetUserData(context.Context, *connect.Request[partner.GetUserDataRequest]) (*connect.Response[partner.GetUserDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.storage.v1.partner.PartnerService.GetUserData is not implemented"))
}

func (UnimplementedPartnerServiceHandler) SetValidationData(context.Context, *connect.Request[partner.SetValidationDataRequest]) (*connect.Response[partner.SetValidationDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.storage.v1.partner.PartnerService.SetValidationData is not implemented"))
}

func (UnimplementedPartnerServiceHandler) RemoveValidationData(context.Context, *connect.Request[partner.RemoveValidationDataRequest]) (*connect.Response[partner.RemoveValidationDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.storage.v1.partner.PartnerService.RemoveValidationData is not implemented"))
}

func (UnimplementedPartnerServiceHandler) GetKycStatus(context.Context, *connect.Request[partner.GetKycStatusRequest]) (*connect.Response[partner.GetKycStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.storage.v1.partner.PartnerService.GetKycStatus is not implemented"))
}

func (UnimplementedPartnerServiceHandler) CreateKycStatus(context.Context, *connect.Request[partner.CreateKycStatusRequest]) (*connect.Response[partner.CreateKycStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.storage.v1.partner.PartnerService.CreateKycStatus is not implemented"))
}

func (UnimplementedPartnerServiceHandler) UpdateKycStatus(context.Context, *connect.Request[partner.UpdateKycStatusRequest]) (*connect.Response[partner.UpdateKycStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.storage.v1.partner.PartnerService.UpdateKycStatus is not implemented"))
}
