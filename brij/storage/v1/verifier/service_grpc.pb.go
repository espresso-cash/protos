// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: brij/storage/v1/verifier/service.proto

package verifier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VerifierService_GetInfo_FullMethodName              = "/brij.storage.v1.verifier.VerifierService/GetInfo"
	VerifierService_GetUserData_FullMethodName          = "/brij.storage.v1.verifier.VerifierService/GetUserData"
	VerifierService_SetValidationData_FullMethodName    = "/brij.storage.v1.verifier.VerifierService/SetValidationData"
	VerifierService_RemoveValidationData_FullMethodName = "/brij.storage.v1.verifier.VerifierService/RemoveValidationData"
	VerifierService_GetKycStatus_FullMethodName         = "/brij.storage.v1.verifier.VerifierService/GetKycStatus"
	VerifierService_CreateKycStatus_FullMethodName      = "/brij.storage.v1.verifier.VerifierService/CreateKycStatus"
	VerifierService_UpdateKycStatus_FullMethodName      = "/brij.storage.v1.verifier.VerifierService/UpdateKycStatus"
)

// VerifierServiceClient is the client API for VerifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifierServiceClient interface {
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	SetValidationData(ctx context.Context, in *SetValidationDataRequest, opts ...grpc.CallOption) (*SetValidationDataResponse, error)
	RemoveValidationData(ctx context.Context, in *RemoveValidationDataRequest, opts ...grpc.CallOption) (*RemoveValidationDataResponse, error)
	GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error)
	CreateKycStatus(ctx context.Context, in *CreateKycStatusRequest, opts ...grpc.CallOption) (*CreateKycStatusResponse, error)
	UpdateKycStatus(ctx context.Context, in *UpdateKycStatusRequest, opts ...grpc.CallOption) (*UpdateKycStatusResponse, error)
}

type verifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifierServiceClient(cc grpc.ClientConnInterface) VerifierServiceClient {
	return &verifierServiceClient{cc}
}

func (c *verifierServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, VerifierService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, VerifierService_GetUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) SetValidationData(ctx context.Context, in *SetValidationDataRequest, opts ...grpc.CallOption) (*SetValidationDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetValidationDataResponse)
	err := c.cc.Invoke(ctx, VerifierService_SetValidationData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) RemoveValidationData(ctx context.Context, in *RemoveValidationDataRequest, opts ...grpc.CallOption) (*RemoveValidationDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveValidationDataResponse)
	err := c.cc.Invoke(ctx, VerifierService_RemoveValidationData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) GetKycStatus(ctx context.Context, in *GetKycStatusRequest, opts ...grpc.CallOption) (*GetKycStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKycStatusResponse)
	err := c.cc.Invoke(ctx, VerifierService_GetKycStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) CreateKycStatus(ctx context.Context, in *CreateKycStatusRequest, opts ...grpc.CallOption) (*CreateKycStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKycStatusResponse)
	err := c.cc.Invoke(ctx, VerifierService_CreateKycStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) UpdateKycStatus(ctx context.Context, in *UpdateKycStatusRequest, opts ...grpc.CallOption) (*UpdateKycStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKycStatusResponse)
	err := c.cc.Invoke(ctx, VerifierService_UpdateKycStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifierServiceServer is the server API for VerifierService service.
// All implementations must embed UnimplementedVerifierServiceServer
// for forward compatibility
type VerifierServiceServer interface {
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	SetValidationData(context.Context, *SetValidationDataRequest) (*SetValidationDataResponse, error)
	RemoveValidationData(context.Context, *RemoveValidationDataRequest) (*RemoveValidationDataResponse, error)
	GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error)
	CreateKycStatus(context.Context, *CreateKycStatusRequest) (*CreateKycStatusResponse, error)
	UpdateKycStatus(context.Context, *UpdateKycStatusRequest) (*UpdateKycStatusResponse, error)
	mustEmbedUnimplementedVerifierServiceServer()
}

// UnimplementedVerifierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVerifierServiceServer struct {
}

func (UnimplementedVerifierServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedVerifierServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedVerifierServiceServer) SetValidationData(context.Context, *SetValidationDataRequest) (*SetValidationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValidationData not implemented")
}
func (UnimplementedVerifierServiceServer) RemoveValidationData(context.Context, *RemoveValidationDataRequest) (*RemoveValidationDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveValidationData not implemented")
}
func (UnimplementedVerifierServiceServer) GetKycStatus(context.Context, *GetKycStatusRequest) (*GetKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycStatus not implemented")
}
func (UnimplementedVerifierServiceServer) CreateKycStatus(context.Context, *CreateKycStatusRequest) (*CreateKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKycStatus not implemented")
}
func (UnimplementedVerifierServiceServer) UpdateKycStatus(context.Context, *UpdateKycStatusRequest) (*UpdateKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKycStatus not implemented")
}
func (UnimplementedVerifierServiceServer) mustEmbedUnimplementedVerifierServiceServer() {}

// UnsafeVerifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifierServiceServer will
// result in compilation errors.
type UnsafeVerifierServiceServer interface {
	mustEmbedUnimplementedVerifierServiceServer()
}

func RegisterVerifierServiceServer(s grpc.ServiceRegistrar, srv VerifierServiceServer) {
	s.RegisterService(&VerifierService_ServiceDesc, srv)
}

func _VerifierService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_SetValidationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValidationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).SetValidationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_SetValidationData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).SetValidationData(ctx, req.(*SetValidationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_RemoveValidationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveValidationDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).RemoveValidationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_RemoveValidationData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).RemoveValidationData(ctx, req.(*RemoveValidationDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_GetKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).GetKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_GetKycStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).GetKycStatus(ctx, req.(*GetKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_CreateKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).CreateKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_CreateKycStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).CreateKycStatus(ctx, req.(*CreateKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_UpdateKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).UpdateKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_UpdateKycStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).UpdateKycStatus(ctx, req.(*UpdateKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifierService_ServiceDesc is the grpc.ServiceDesc for VerifierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brij.storage.v1.verifier.VerifierService",
	HandlerType: (*VerifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _VerifierService_GetInfo_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _VerifierService_GetUserData_Handler,
		},
		{
			MethodName: "SetValidationData",
			Handler:    _VerifierService_SetValidationData_Handler,
		},
		{
			MethodName: "RemoveValidationData",
			Handler:    _VerifierService_RemoveValidationData_Handler,
		},
		{
			MethodName: "GetKycStatus",
			Handler:    _VerifierService_GetKycStatus_Handler,
		},
		{
			MethodName: "CreateKycStatus",
			Handler:    _VerifierService_CreateKycStatus_Handler,
		},
		{
			MethodName: "UpdateKycStatus",
			Handler:    _VerifierService_UpdateKycStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brij/storage/v1/verifier/service.proto",
}
