// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/verifier/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.brij.fi/protos/brij/verifier/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VerifierServiceName is the fully-qualified name of the VerifierService service.
	VerifierServiceName = "brij.verifier.v1.VerifierService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VerifierServiceInitEmailValidationProcedure is the fully-qualified name of the VerifierService's
	// InitEmailValidation RPC.
	VerifierServiceInitEmailValidationProcedure = "/brij.verifier.v1.VerifierService/InitEmailValidation"
	// VerifierServiceValidateEmailProcedure is the fully-qualified name of the VerifierService's
	// ValidateEmail RPC.
	VerifierServiceValidateEmailProcedure = "/brij.verifier.v1.VerifierService/ValidateEmail"
	// VerifierServiceInitPhoneValidationProcedure is the fully-qualified name of the VerifierService's
	// InitPhoneValidation RPC.
	VerifierServiceInitPhoneValidationProcedure = "/brij.verifier.v1.VerifierService/InitPhoneValidation"
	// VerifierServiceValidatePhoneProcedure is the fully-qualified name of the VerifierService's
	// ValidatePhone RPC.
	VerifierServiceValidatePhoneProcedure = "/brij.verifier.v1.VerifierService/ValidatePhone"
	// VerifierServiceStartKycProcedure is the fully-qualified name of the VerifierService's StartKyc
	// RPC.
	VerifierServiceStartKycProcedure = "/brij.verifier.v1.VerifierService/StartKyc"
	// VerifierServiceGetKycRequirementsProcedure is the fully-qualified name of the VerifierService's
	// GetKycRequirements RPC.
	VerifierServiceGetKycRequirementsProcedure = "/brij.verifier.v1.VerifierService/GetKycRequirements"
)

// VerifierServiceClient is a client for the brij.verifier.v1.VerifierService service.
type VerifierServiceClient interface {
	InitEmailValidation(context.Context, *connect.Request[v1.InitEmailValidationRequest]) (*connect.Response[v1.InitEmailValidationResponse], error)
	ValidateEmail(context.Context, *connect.Request[v1.ValidateEmailRequest]) (*connect.Response[v1.ValidateEmailResponse], error)
	InitPhoneValidation(context.Context, *connect.Request[v1.InitPhoneValidationRequest]) (*connect.Response[v1.InitPhoneValidationResponse], error)
	ValidatePhone(context.Context, *connect.Request[v1.ValidatePhoneRequest]) (*connect.Response[v1.ValidatePhoneResponse], error)
	StartKyc(context.Context, *connect.Request[v1.StartKycRequest]) (*connect.Response[v1.StartKycResponse], error)
	GetKycRequirements(context.Context, *connect.Request[v1.GetKycRequirementsRequest]) (*connect.Response[v1.GetKycRequirementsResponse], error)
}

// NewVerifierServiceClient constructs a client for the brij.verifier.v1.VerifierService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVerifierServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VerifierServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	verifierServiceMethods := v1.File_brij_verifier_v1_service_proto.Services().ByName("VerifierService").Methods()
	return &verifierServiceClient{
		initEmailValidation: connect.NewClient[v1.InitEmailValidationRequest, v1.InitEmailValidationResponse](
			httpClient,
			baseURL+VerifierServiceInitEmailValidationProcedure,
			connect.WithSchema(verifierServiceMethods.ByName("InitEmailValidation")),
			connect.WithClientOptions(opts...),
		),
		validateEmail: connect.NewClient[v1.ValidateEmailRequest, v1.ValidateEmailResponse](
			httpClient,
			baseURL+VerifierServiceValidateEmailProcedure,
			connect.WithSchema(verifierServiceMethods.ByName("ValidateEmail")),
			connect.WithClientOptions(opts...),
		),
		initPhoneValidation: connect.NewClient[v1.InitPhoneValidationRequest, v1.InitPhoneValidationResponse](
			httpClient,
			baseURL+VerifierServiceInitPhoneValidationProcedure,
			connect.WithSchema(verifierServiceMethods.ByName("InitPhoneValidation")),
			connect.WithClientOptions(opts...),
		),
		validatePhone: connect.NewClient[v1.ValidatePhoneRequest, v1.ValidatePhoneResponse](
			httpClient,
			baseURL+VerifierServiceValidatePhoneProcedure,
			connect.WithSchema(verifierServiceMethods.ByName("ValidatePhone")),
			connect.WithClientOptions(opts...),
		),
		startKyc: connect.NewClient[v1.StartKycRequest, v1.StartKycResponse](
			httpClient,
			baseURL+VerifierServiceStartKycProcedure,
			connect.WithSchema(verifierServiceMethods.ByName("StartKyc")),
			connect.WithClientOptions(opts...),
		),
		getKycRequirements: connect.NewClient[v1.GetKycRequirementsRequest, v1.GetKycRequirementsResponse](
			httpClient,
			baseURL+VerifierServiceGetKycRequirementsProcedure,
			connect.WithSchema(verifierServiceMethods.ByName("GetKycRequirements")),
			connect.WithClientOptions(opts...),
		),
	}
}

// verifierServiceClient implements VerifierServiceClient.
type verifierServiceClient struct {
	initEmailValidation *connect.Client[v1.InitEmailValidationRequest, v1.InitEmailValidationResponse]
	validateEmail       *connect.Client[v1.ValidateEmailRequest, v1.ValidateEmailResponse]
	initPhoneValidation *connect.Client[v1.InitPhoneValidationRequest, v1.InitPhoneValidationResponse]
	validatePhone       *connect.Client[v1.ValidatePhoneRequest, v1.ValidatePhoneResponse]
	startKyc            *connect.Client[v1.StartKycRequest, v1.StartKycResponse]
	getKycRequirements  *connect.Client[v1.GetKycRequirementsRequest, v1.GetKycRequirementsResponse]
}

// InitEmailValidation calls brij.verifier.v1.VerifierService.InitEmailValidation.
func (c *verifierServiceClient) InitEmailValidation(ctx context.Context, req *connect.Request[v1.InitEmailValidationRequest]) (*connect.Response[v1.InitEmailValidationResponse], error) {
	return c.initEmailValidation.CallUnary(ctx, req)
}

// ValidateEmail calls brij.verifier.v1.VerifierService.ValidateEmail.
func (c *verifierServiceClient) ValidateEmail(ctx context.Context, req *connect.Request[v1.ValidateEmailRequest]) (*connect.Response[v1.ValidateEmailResponse], error) {
	return c.validateEmail.CallUnary(ctx, req)
}

// InitPhoneValidation calls brij.verifier.v1.VerifierService.InitPhoneValidation.
func (c *verifierServiceClient) InitPhoneValidation(ctx context.Context, req *connect.Request[v1.InitPhoneValidationRequest]) (*connect.Response[v1.InitPhoneValidationResponse], error) {
	return c.initPhoneValidation.CallUnary(ctx, req)
}

// ValidatePhone calls brij.verifier.v1.VerifierService.ValidatePhone.
func (c *verifierServiceClient) ValidatePhone(ctx context.Context, req *connect.Request[v1.ValidatePhoneRequest]) (*connect.Response[v1.ValidatePhoneResponse], error) {
	return c.validatePhone.CallUnary(ctx, req)
}

// StartKyc calls brij.verifier.v1.VerifierService.StartKyc.
func (c *verifierServiceClient) StartKyc(ctx context.Context, req *connect.Request[v1.StartKycRequest]) (*connect.Response[v1.StartKycResponse], error) {
	return c.startKyc.CallUnary(ctx, req)
}

// GetKycRequirements calls brij.verifier.v1.VerifierService.GetKycRequirements.
func (c *verifierServiceClient) GetKycRequirements(ctx context.Context, req *connect.Request[v1.GetKycRequirementsRequest]) (*connect.Response[v1.GetKycRequirementsResponse], error) {
	return c.getKycRequirements.CallUnary(ctx, req)
}

// VerifierServiceHandler is an implementation of the brij.verifier.v1.VerifierService service.
type VerifierServiceHandler interface {
	InitEmailValidation(context.Context, *connect.Request[v1.InitEmailValidationRequest]) (*connect.Response[v1.InitEmailValidationResponse], error)
	ValidateEmail(context.Context, *connect.Request[v1.ValidateEmailRequest]) (*connect.Response[v1.ValidateEmailResponse], error)
	InitPhoneValidation(context.Context, *connect.Request[v1.InitPhoneValidationRequest]) (*connect.Response[v1.InitPhoneValidationResponse], error)
	ValidatePhone(context.Context, *connect.Request[v1.ValidatePhoneRequest]) (*connect.Response[v1.ValidatePhoneResponse], error)
	StartKyc(context.Context, *connect.Request[v1.StartKycRequest]) (*connect.Response[v1.StartKycResponse], error)
	GetKycRequirements(context.Context, *connect.Request[v1.GetKycRequirementsRequest]) (*connect.Response[v1.GetKycRequirementsResponse], error)
}

// NewVerifierServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVerifierServiceHandler(svc VerifierServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	verifierServiceMethods := v1.File_brij_verifier_v1_service_proto.Services().ByName("VerifierService").Methods()
	verifierServiceInitEmailValidationHandler := connect.NewUnaryHandler(
		VerifierServiceInitEmailValidationProcedure,
		svc.InitEmailValidation,
		connect.WithSchema(verifierServiceMethods.ByName("InitEmailValidation")),
		connect.WithHandlerOptions(opts...),
	)
	verifierServiceValidateEmailHandler := connect.NewUnaryHandler(
		VerifierServiceValidateEmailProcedure,
		svc.ValidateEmail,
		connect.WithSchema(verifierServiceMethods.ByName("ValidateEmail")),
		connect.WithHandlerOptions(opts...),
	)
	verifierServiceInitPhoneValidationHandler := connect.NewUnaryHandler(
		VerifierServiceInitPhoneValidationProcedure,
		svc.InitPhoneValidation,
		connect.WithSchema(verifierServiceMethods.ByName("InitPhoneValidation")),
		connect.WithHandlerOptions(opts...),
	)
	verifierServiceValidatePhoneHandler := connect.NewUnaryHandler(
		VerifierServiceValidatePhoneProcedure,
		svc.ValidatePhone,
		connect.WithSchema(verifierServiceMethods.ByName("ValidatePhone")),
		connect.WithHandlerOptions(opts...),
	)
	verifierServiceStartKycHandler := connect.NewUnaryHandler(
		VerifierServiceStartKycProcedure,
		svc.StartKyc,
		connect.WithSchema(verifierServiceMethods.ByName("StartKyc")),
		connect.WithHandlerOptions(opts...),
	)
	verifierServiceGetKycRequirementsHandler := connect.NewUnaryHandler(
		VerifierServiceGetKycRequirementsProcedure,
		svc.GetKycRequirements,
		connect.WithSchema(verifierServiceMethods.ByName("GetKycRequirements")),
		connect.WithHandlerOptions(opts...),
	)
	return "/brij.verifier.v1.VerifierService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VerifierServiceInitEmailValidationProcedure:
			verifierServiceInitEmailValidationHandler.ServeHTTP(w, r)
		case VerifierServiceValidateEmailProcedure:
			verifierServiceValidateEmailHandler.ServeHTTP(w, r)
		case VerifierServiceInitPhoneValidationProcedure:
			verifierServiceInitPhoneValidationHandler.ServeHTTP(w, r)
		case VerifierServiceValidatePhoneProcedure:
			verifierServiceValidatePhoneHandler.ServeHTTP(w, r)
		case VerifierServiceStartKycProcedure:
			verifierServiceStartKycHandler.ServeHTTP(w, r)
		case VerifierServiceGetKycRequirementsProcedure:
			verifierServiceGetKycRequirementsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVerifierServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVerifierServiceHandler struct{}

func (UnimplementedVerifierServiceHandler) InitEmailValidation(context.Context, *connect.Request[v1.InitEmailValidationRequest]) (*connect.Response[v1.InitEmailValidationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.v1.VerifierService.InitEmailValidation is not implemented"))
}

func (UnimplementedVerifierServiceHandler) ValidateEmail(context.Context, *connect.Request[v1.ValidateEmailRequest]) (*connect.Response[v1.ValidateEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.v1.VerifierService.ValidateEmail is not implemented"))
}

func (UnimplementedVerifierServiceHandler) InitPhoneValidation(context.Context, *connect.Request[v1.InitPhoneValidationRequest]) (*connect.Response[v1.InitPhoneValidationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.v1.VerifierService.InitPhoneValidation is not implemented"))
}

func (UnimplementedVerifierServiceHandler) ValidatePhone(context.Context, *connect.Request[v1.ValidatePhoneRequest]) (*connect.Response[v1.ValidatePhoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.v1.VerifierService.ValidatePhone is not implemented"))
}

func (UnimplementedVerifierServiceHandler) StartKyc(context.Context, *connect.Request[v1.StartKycRequest]) (*connect.Response[v1.StartKycResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.v1.VerifierService.StartKyc is not implemented"))
}

func (UnimplementedVerifierServiceHandler) GetKycRequirements(context.Context, *connect.Request[v1.GetKycRequirementsRequest]) (*connect.Response[v1.GetKycRequirementsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.v1.VerifierService.GetKycRequirements is not implemented"))
}
