// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: brij/verifier/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VerifierService_InitEmailValidation_FullMethodName = "/brij.verifier.v1.VerifierService/InitEmailValidation"
	VerifierService_ValidateEmail_FullMethodName       = "/brij.verifier.v1.VerifierService/ValidateEmail"
	VerifierService_InitPhoneValidation_FullMethodName = "/brij.verifier.v1.VerifierService/InitPhoneValidation"
	VerifierService_ValidatePhone_FullMethodName       = "/brij.verifier.v1.VerifierService/ValidatePhone"
	VerifierService_StartKyc_FullMethodName            = "/brij.verifier.v1.VerifierService/StartKyc"
	VerifierService_GetKycRequirements_FullMethodName  = "/brij.verifier.v1.VerifierService/GetKycRequirements"
)

// VerifierServiceClient is the client API for VerifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifierServiceClient interface {
	InitEmailValidation(ctx context.Context, in *InitEmailValidationRequest, opts ...grpc.CallOption) (*InitEmailValidationResponse, error)
	ValidateEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*ValidateEmailResponse, error)
	InitPhoneValidation(ctx context.Context, in *InitPhoneValidationRequest, opts ...grpc.CallOption) (*InitPhoneValidationResponse, error)
	ValidatePhone(ctx context.Context, in *ValidatePhoneRequest, opts ...grpc.CallOption) (*ValidatePhoneResponse, error)
	StartKyc(ctx context.Context, in *StartKycRequest, opts ...grpc.CallOption) (*StartKycResponse, error)
	GetKycRequirements(ctx context.Context, in *GetKycRequirementsRequest, opts ...grpc.CallOption) (*GetKycRequirementsResponse, error)
}

type verifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifierServiceClient(cc grpc.ClientConnInterface) VerifierServiceClient {
	return &verifierServiceClient{cc}
}

func (c *verifierServiceClient) InitEmailValidation(ctx context.Context, in *InitEmailValidationRequest, opts ...grpc.CallOption) (*InitEmailValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitEmailValidationResponse)
	err := c.cc.Invoke(ctx, VerifierService_InitEmailValidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) ValidateEmail(ctx context.Context, in *ValidateEmailRequest, opts ...grpc.CallOption) (*ValidateEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateEmailResponse)
	err := c.cc.Invoke(ctx, VerifierService_ValidateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) InitPhoneValidation(ctx context.Context, in *InitPhoneValidationRequest, opts ...grpc.CallOption) (*InitPhoneValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitPhoneValidationResponse)
	err := c.cc.Invoke(ctx, VerifierService_InitPhoneValidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) ValidatePhone(ctx context.Context, in *ValidatePhoneRequest, opts ...grpc.CallOption) (*ValidatePhoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePhoneResponse)
	err := c.cc.Invoke(ctx, VerifierService_ValidatePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) StartKyc(ctx context.Context, in *StartKycRequest, opts ...grpc.CallOption) (*StartKycResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartKycResponse)
	err := c.cc.Invoke(ctx, VerifierService_StartKyc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierServiceClient) GetKycRequirements(ctx context.Context, in *GetKycRequirementsRequest, opts ...grpc.CallOption) (*GetKycRequirementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKycRequirementsResponse)
	err := c.cc.Invoke(ctx, VerifierService_GetKycRequirements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifierServiceServer is the server API for VerifierService service.
// All implementations must embed UnimplementedVerifierServiceServer
// for forward compatibility.
type VerifierServiceServer interface {
	InitEmailValidation(context.Context, *InitEmailValidationRequest) (*InitEmailValidationResponse, error)
	ValidateEmail(context.Context, *ValidateEmailRequest) (*ValidateEmailResponse, error)
	InitPhoneValidation(context.Context, *InitPhoneValidationRequest) (*InitPhoneValidationResponse, error)
	ValidatePhone(context.Context, *ValidatePhoneRequest) (*ValidatePhoneResponse, error)
	StartKyc(context.Context, *StartKycRequest) (*StartKycResponse, error)
	GetKycRequirements(context.Context, *GetKycRequirementsRequest) (*GetKycRequirementsResponse, error)
	mustEmbedUnimplementedVerifierServiceServer()
}

// UnimplementedVerifierServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVerifierServiceServer struct{}

func (UnimplementedVerifierServiceServer) InitEmailValidation(context.Context, *InitEmailValidationRequest) (*InitEmailValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitEmailValidation not implemented")
}
func (UnimplementedVerifierServiceServer) ValidateEmail(context.Context, *ValidateEmailRequest) (*ValidateEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEmail not implemented")
}
func (UnimplementedVerifierServiceServer) InitPhoneValidation(context.Context, *InitPhoneValidationRequest) (*InitPhoneValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPhoneValidation not implemented")
}
func (UnimplementedVerifierServiceServer) ValidatePhone(context.Context, *ValidatePhoneRequest) (*ValidatePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePhone not implemented")
}
func (UnimplementedVerifierServiceServer) StartKyc(context.Context, *StartKycRequest) (*StartKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKyc not implemented")
}
func (UnimplementedVerifierServiceServer) GetKycRequirements(context.Context, *GetKycRequirementsRequest) (*GetKycRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycRequirements not implemented")
}
func (UnimplementedVerifierServiceServer) mustEmbedUnimplementedVerifierServiceServer() {}
func (UnimplementedVerifierServiceServer) testEmbeddedByValue()                         {}

// UnsafeVerifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifierServiceServer will
// result in compilation errors.
type UnsafeVerifierServiceServer interface {
	mustEmbedUnimplementedVerifierServiceServer()
}

func RegisterVerifierServiceServer(s grpc.ServiceRegistrar, srv VerifierServiceServer) {
	// If the following call pancis, it indicates UnimplementedVerifierServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VerifierService_ServiceDesc, srv)
}

func _VerifierService_InitEmailValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitEmailValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).InitEmailValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_InitEmailValidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).InitEmailValidation(ctx, req.(*InitEmailValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_ValidateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).ValidateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_ValidateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).ValidateEmail(ctx, req.(*ValidateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_InitPhoneValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPhoneValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).InitPhoneValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_InitPhoneValidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).InitPhoneValidation(ctx, req.(*InitPhoneValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_ValidatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).ValidatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_ValidatePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).ValidatePhone(ctx, req.(*ValidatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_StartKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).StartKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_StartKyc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).StartKyc(ctx, req.(*StartKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifierService_GetKycRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).GetKycRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_GetKycRequirements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).GetKycRequirements(ctx, req.(*GetKycRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifierService_ServiceDesc is the grpc.ServiceDesc for VerifierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brij.verifier.v1.VerifierService",
	HandlerType: (*VerifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitEmailValidation",
			Handler:    _VerifierService_InitEmailValidation_Handler,
		},
		{
			MethodName: "ValidateEmail",
			Handler:    _VerifierService_ValidateEmail_Handler,
		},
		{
			MethodName: "InitPhoneValidation",
			Handler:    _VerifierService_InitPhoneValidation_Handler,
		},
		{
			MethodName: "ValidatePhone",
			Handler:    _VerifierService_ValidatePhone_Handler,
		},
		{
			MethodName: "StartKyc",
			Handler:    _VerifierService_StartKyc_Handler,
		},
		{
			MethodName: "GetKycRequirements",
			Handler:    _VerifierService_GetKycRequirements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brij/verifier/v1/service.proto",
}
