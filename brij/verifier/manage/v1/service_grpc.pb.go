// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: brij/verifier/manage/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ManageService_SmileIdCheckStatus_FullMethodName = "/brij.verifier.manage.v1.ManageService/SmileIdCheckStatus"
	ManageService_SumsubCheckStatus_FullMethodName  = "/brij.verifier.manage.v1.ManageService/SumsubCheckStatus"
)

// ManageServiceClient is the client API for ManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageServiceClient interface {
	SmileIdCheckStatus(ctx context.Context, in *SmileIdCheckStatusRequest, opts ...grpc.CallOption) (*SmileIdCheckStatusResponse, error)
	SumsubCheckStatus(ctx context.Context, in *SumsubCheckStatusRequest, opts ...grpc.CallOption) (*SumsubCheckStatusResponse, error)
}

type manageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManageServiceClient(cc grpc.ClientConnInterface) ManageServiceClient {
	return &manageServiceClient{cc}
}

func (c *manageServiceClient) SmileIdCheckStatus(ctx context.Context, in *SmileIdCheckStatusRequest, opts ...grpc.CallOption) (*SmileIdCheckStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmileIdCheckStatusResponse)
	err := c.cc.Invoke(ctx, ManageService_SmileIdCheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SumsubCheckStatus(ctx context.Context, in *SumsubCheckStatusRequest, opts ...grpc.CallOption) (*SumsubCheckStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumsubCheckStatusResponse)
	err := c.cc.Invoke(ctx, ManageService_SumsubCheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServiceServer is the server API for ManageService service.
// All implementations must embed UnimplementedManageServiceServer
// for forward compatibility
type ManageServiceServer interface {
	SmileIdCheckStatus(context.Context, *SmileIdCheckStatusRequest) (*SmileIdCheckStatusResponse, error)
	SumsubCheckStatus(context.Context, *SumsubCheckStatusRequest) (*SumsubCheckStatusResponse, error)
	mustEmbedUnimplementedManageServiceServer()
}

// UnimplementedManageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManageServiceServer struct {
}

func (UnimplementedManageServiceServer) SmileIdCheckStatus(context.Context, *SmileIdCheckStatusRequest) (*SmileIdCheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmileIdCheckStatus not implemented")
}
func (UnimplementedManageServiceServer) SumsubCheckStatus(context.Context, *SumsubCheckStatusRequest) (*SumsubCheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumsubCheckStatus not implemented")
}
func (UnimplementedManageServiceServer) mustEmbedUnimplementedManageServiceServer() {}

// UnsafeManageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServiceServer will
// result in compilation errors.
type UnsafeManageServiceServer interface {
	mustEmbedUnimplementedManageServiceServer()
}

func RegisterManageServiceServer(s grpc.ServiceRegistrar, srv ManageServiceServer) {
	s.RegisterService(&ManageService_ServiceDesc, srv)
}

func _ManageService_SmileIdCheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmileIdCheckStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SmileIdCheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_SmileIdCheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SmileIdCheckStatus(ctx, req.(*SmileIdCheckStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SumsubCheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumsubCheckStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SumsubCheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManageService_SumsubCheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SumsubCheckStatus(ctx, req.(*SumsubCheckStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageService_ServiceDesc is the grpc.ServiceDesc for ManageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brij.verifier.manage.v1.ManageService",
	HandlerType: (*ManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SmileIdCheckStatus",
			Handler:    _ManageService_SmileIdCheckStatus_Handler,
		},
		{
			MethodName: "SumsubCheckStatus",
			Handler:    _ManageService_SumsubCheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brij/verifier/manage/v1/service.proto",
}
