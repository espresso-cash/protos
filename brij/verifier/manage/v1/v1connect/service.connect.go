// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/verifier/manage/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.brij.fi/protos/brij/verifier/manage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManageServiceName is the fully-qualified name of the ManageService service.
	ManageServiceName = "brij.verifier.manage.v1.ManageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManageServiceSmileIdCheckStatusProcedure is the fully-qualified name of the ManageService's
	// SmileIdCheckStatus RPC.
	ManageServiceSmileIdCheckStatusProcedure = "/brij.verifier.manage.v1.ManageService/SmileIdCheckStatus"
	// ManageServiceSumsubCheckStatusProcedure is the fully-qualified name of the ManageService's
	// SumsubCheckStatus RPC.
	ManageServiceSumsubCheckStatusProcedure = "/brij.verifier.manage.v1.ManageService/SumsubCheckStatus"
)

// ManageServiceClient is a client for the brij.verifier.manage.v1.ManageService service.
type ManageServiceClient interface {
	SmileIdCheckStatus(context.Context, *connect.Request[v1.SmileIdCheckStatusRequest]) (*connect.Response[v1.SmileIdCheckStatusResponse], error)
	SumsubCheckStatus(context.Context, *connect.Request[v1.SumsubCheckStatusRequest]) (*connect.Response[v1.SumsubCheckStatusResponse], error)
}

// NewManageServiceClient constructs a client for the brij.verifier.manage.v1.ManageService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	manageServiceMethods := v1.File_brij_verifier_manage_v1_service_proto.Services().ByName("ManageService").Methods()
	return &manageServiceClient{
		smileIdCheckStatus: connect.NewClient[v1.SmileIdCheckStatusRequest, v1.SmileIdCheckStatusResponse](
			httpClient,
			baseURL+ManageServiceSmileIdCheckStatusProcedure,
			connect.WithSchema(manageServiceMethods.ByName("SmileIdCheckStatus")),
			connect.WithClientOptions(opts...),
		),
		sumsubCheckStatus: connect.NewClient[v1.SumsubCheckStatusRequest, v1.SumsubCheckStatusResponse](
			httpClient,
			baseURL+ManageServiceSumsubCheckStatusProcedure,
			connect.WithSchema(manageServiceMethods.ByName("SumsubCheckStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// manageServiceClient implements ManageServiceClient.
type manageServiceClient struct {
	smileIdCheckStatus *connect.Client[v1.SmileIdCheckStatusRequest, v1.SmileIdCheckStatusResponse]
	sumsubCheckStatus  *connect.Client[v1.SumsubCheckStatusRequest, v1.SumsubCheckStatusResponse]
}

// SmileIdCheckStatus calls brij.verifier.manage.v1.ManageService.SmileIdCheckStatus.
func (c *manageServiceClient) SmileIdCheckStatus(ctx context.Context, req *connect.Request[v1.SmileIdCheckStatusRequest]) (*connect.Response[v1.SmileIdCheckStatusResponse], error) {
	return c.smileIdCheckStatus.CallUnary(ctx, req)
}

// SumsubCheckStatus calls brij.verifier.manage.v1.ManageService.SumsubCheckStatus.
func (c *manageServiceClient) SumsubCheckStatus(ctx context.Context, req *connect.Request[v1.SumsubCheckStatusRequest]) (*connect.Response[v1.SumsubCheckStatusResponse], error) {
	return c.sumsubCheckStatus.CallUnary(ctx, req)
}

// ManageServiceHandler is an implementation of the brij.verifier.manage.v1.ManageService service.
type ManageServiceHandler interface {
	SmileIdCheckStatus(context.Context, *connect.Request[v1.SmileIdCheckStatusRequest]) (*connect.Response[v1.SmileIdCheckStatusResponse], error)
	SumsubCheckStatus(context.Context, *connect.Request[v1.SumsubCheckStatusRequest]) (*connect.Response[v1.SumsubCheckStatusResponse], error)
}

// NewManageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManageServiceHandler(svc ManageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	manageServiceMethods := v1.File_brij_verifier_manage_v1_service_proto.Services().ByName("ManageService").Methods()
	manageServiceSmileIdCheckStatusHandler := connect.NewUnaryHandler(
		ManageServiceSmileIdCheckStatusProcedure,
		svc.SmileIdCheckStatus,
		connect.WithSchema(manageServiceMethods.ByName("SmileIdCheckStatus")),
		connect.WithHandlerOptions(opts...),
	)
	manageServiceSumsubCheckStatusHandler := connect.NewUnaryHandler(
		ManageServiceSumsubCheckStatusProcedure,
		svc.SumsubCheckStatus,
		connect.WithSchema(manageServiceMethods.ByName("SumsubCheckStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/brij.verifier.manage.v1.ManageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManageServiceSmileIdCheckStatusProcedure:
			manageServiceSmileIdCheckStatusHandler.ServeHTTP(w, r)
		case ManageServiceSumsubCheckStatusProcedure:
			manageServiceSumsubCheckStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManageServiceHandler struct{}

func (UnimplementedManageServiceHandler) SmileIdCheckStatus(context.Context, *connect.Request[v1.SmileIdCheckStatusRequest]) (*connect.Response[v1.SmileIdCheckStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.manage.v1.ManageService.SmileIdCheckStatus is not implemented"))
}

func (UnimplementedManageServiceHandler) SumsubCheckStatus(context.Context, *connect.Request[v1.SumsubCheckStatusRequest]) (*connect.Response[v1.SumsubCheckStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.manage.v1.ManageService.SumsubCheckStatus is not implemented"))
}
