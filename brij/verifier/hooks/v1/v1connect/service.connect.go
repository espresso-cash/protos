// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/verifier/hooks/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.brij.fi/protos/brij/verifier/hooks/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HooksServiceName is the fully-qualified name of the HooksService service.
	HooksServiceName = "brij.verifier.hooks.v1.HooksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HooksServiceSmileIdResultProcedure is the fully-qualified name of the HooksService's
	// SmileIdResult RPC.
	HooksServiceSmileIdResultProcedure = "/brij.verifier.hooks.v1.HooksService/SmileIdResult"
	// HooksServiceSumsubResultProcedure is the fully-qualified name of the HooksService's SumsubResult
	// RPC.
	HooksServiceSumsubResultProcedure = "/brij.verifier.hooks.v1.HooksService/SumsubResult"
)

// HooksServiceClient is a client for the brij.verifier.hooks.v1.HooksService service.
type HooksServiceClient interface {
	SmileIdResult(context.Context, *connect.Request[v1.SmileIdResultRequest]) (*connect.Response[v1.SmileIdResultResponse], error)
	SumsubResult(context.Context, *connect.Request[v1.SumsubResultRequest]) (*connect.Response[v1.SumsubResultResponse], error)
}

// NewHooksServiceClient constructs a client for the brij.verifier.hooks.v1.HooksService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHooksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HooksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hooksServiceMethods := v1.File_brij_verifier_hooks_v1_service_proto.Services().ByName("HooksService").Methods()
	return &hooksServiceClient{
		smileIdResult: connect.NewClient[v1.SmileIdResultRequest, v1.SmileIdResultResponse](
			httpClient,
			baseURL+HooksServiceSmileIdResultProcedure,
			connect.WithSchema(hooksServiceMethods.ByName("SmileIdResult")),
			connect.WithClientOptions(opts...),
		),
		sumsubResult: connect.NewClient[v1.SumsubResultRequest, v1.SumsubResultResponse](
			httpClient,
			baseURL+HooksServiceSumsubResultProcedure,
			connect.WithSchema(hooksServiceMethods.ByName("SumsubResult")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hooksServiceClient implements HooksServiceClient.
type hooksServiceClient struct {
	smileIdResult *connect.Client[v1.SmileIdResultRequest, v1.SmileIdResultResponse]
	sumsubResult  *connect.Client[v1.SumsubResultRequest, v1.SumsubResultResponse]
}

// SmileIdResult calls brij.verifier.hooks.v1.HooksService.SmileIdResult.
func (c *hooksServiceClient) SmileIdResult(ctx context.Context, req *connect.Request[v1.SmileIdResultRequest]) (*connect.Response[v1.SmileIdResultResponse], error) {
	return c.smileIdResult.CallUnary(ctx, req)
}

// SumsubResult calls brij.verifier.hooks.v1.HooksService.SumsubResult.
func (c *hooksServiceClient) SumsubResult(ctx context.Context, req *connect.Request[v1.SumsubResultRequest]) (*connect.Response[v1.SumsubResultResponse], error) {
	return c.sumsubResult.CallUnary(ctx, req)
}

// HooksServiceHandler is an implementation of the brij.verifier.hooks.v1.HooksService service.
type HooksServiceHandler interface {
	SmileIdResult(context.Context, *connect.Request[v1.SmileIdResultRequest]) (*connect.Response[v1.SmileIdResultResponse], error)
	SumsubResult(context.Context, *connect.Request[v1.SumsubResultRequest]) (*connect.Response[v1.SumsubResultResponse], error)
}

// NewHooksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHooksServiceHandler(svc HooksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hooksServiceMethods := v1.File_brij_verifier_hooks_v1_service_proto.Services().ByName("HooksService").Methods()
	hooksServiceSmileIdResultHandler := connect.NewUnaryHandler(
		HooksServiceSmileIdResultProcedure,
		svc.SmileIdResult,
		connect.WithSchema(hooksServiceMethods.ByName("SmileIdResult")),
		connect.WithHandlerOptions(opts...),
	)
	hooksServiceSumsubResultHandler := connect.NewUnaryHandler(
		HooksServiceSumsubResultProcedure,
		svc.SumsubResult,
		connect.WithSchema(hooksServiceMethods.ByName("SumsubResult")),
		connect.WithHandlerOptions(opts...),
	)
	return "/brij.verifier.hooks.v1.HooksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HooksServiceSmileIdResultProcedure:
			hooksServiceSmileIdResultHandler.ServeHTTP(w, r)
		case HooksServiceSumsubResultProcedure:
			hooksServiceSumsubResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHooksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHooksServiceHandler struct{}

func (UnimplementedHooksServiceHandler) SmileIdResult(context.Context, *connect.Request[v1.SmileIdResultRequest]) (*connect.Response[v1.SmileIdResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.hooks.v1.HooksService.SmileIdResult is not implemented"))
}

func (UnimplementedHooksServiceHandler) SumsubResult(context.Context, *connect.Request[v1.SumsubResultRequest]) (*connect.Response[v1.SumsubResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.verifier.hooks.v1.HooksService.SumsubResult is not implemented"))
}
