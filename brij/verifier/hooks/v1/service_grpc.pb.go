// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: brij/verifier/hooks/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HooksService_SmileIdResult_FullMethodName = "/brij.verifier.hooks.v1.HooksService/SmileIdResult"
	HooksService_SumsubResult_FullMethodName  = "/brij.verifier.hooks.v1.HooksService/SumsubResult"
)

// HooksServiceClient is the client API for HooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HooksServiceClient interface {
	SmileIdResult(ctx context.Context, in *SmileIdResultRequest, opts ...grpc.CallOption) (*SmileIdResultResponse, error)
	SumsubResult(ctx context.Context, in *SumsubResultRequest, opts ...grpc.CallOption) (*SumsubResultResponse, error)
}

type hooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHooksServiceClient(cc grpc.ClientConnInterface) HooksServiceClient {
	return &hooksServiceClient{cc}
}

func (c *hooksServiceClient) SmileIdResult(ctx context.Context, in *SmileIdResultRequest, opts ...grpc.CallOption) (*SmileIdResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SmileIdResultResponse)
	err := c.cc.Invoke(ctx, HooksService_SmileIdResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) SumsubResult(ctx context.Context, in *SumsubResultRequest, opts ...grpc.CallOption) (*SumsubResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumsubResultResponse)
	err := c.cc.Invoke(ctx, HooksService_SumsubResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HooksServiceServer is the server API for HooksService service.
// All implementations must embed UnimplementedHooksServiceServer
// for forward compatibility
type HooksServiceServer interface {
	SmileIdResult(context.Context, *SmileIdResultRequest) (*SmileIdResultResponse, error)
	SumsubResult(context.Context, *SumsubResultRequest) (*SumsubResultResponse, error)
	mustEmbedUnimplementedHooksServiceServer()
}

// UnimplementedHooksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHooksServiceServer struct {
}

func (UnimplementedHooksServiceServer) SmileIdResult(context.Context, *SmileIdResultRequest) (*SmileIdResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmileIdResult not implemented")
}
func (UnimplementedHooksServiceServer) SumsubResult(context.Context, *SumsubResultRequest) (*SumsubResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumsubResult not implemented")
}
func (UnimplementedHooksServiceServer) mustEmbedUnimplementedHooksServiceServer() {}

// UnsafeHooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HooksServiceServer will
// result in compilation errors.
type UnsafeHooksServiceServer interface {
	mustEmbedUnimplementedHooksServiceServer()
}

func RegisterHooksServiceServer(s grpc.ServiceRegistrar, srv HooksServiceServer) {
	s.RegisterService(&HooksService_ServiceDesc, srv)
}

func _HooksService_SmileIdResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmileIdResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).SmileIdResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_SmileIdResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).SmileIdResult(ctx, req.(*SmileIdResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_SumsubResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumsubResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).SumsubResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_SumsubResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).SumsubResult(ctx, req.(*SumsubResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HooksService_ServiceDesc is the grpc.ServiceDesc for HooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brij.verifier.hooks.v1.HooksService",
	HandlerType: (*HooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SmileIdResult",
			Handler:    _HooksService_SmileIdResult_Handler,
		},
		{
			MethodName: "SumsubResult",
			Handler:    _HooksService_SumsubResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brij/verifier/hooks/v1/service.proto",
}
