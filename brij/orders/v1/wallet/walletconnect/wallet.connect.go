// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/orders/v1/wallet/wallet.proto

package walletconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	wallet "go.brij.fi/protos/brij/orders/v1/wallet"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WalletServiceName is the fully-qualified name of the WalletService service.
	WalletServiceName = "brij.orders.v1.wallet.WalletService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WalletServiceCreateOnRampOrderProcedure is the fully-qualified name of the WalletService's
	// CreateOnRampOrder RPC.
	WalletServiceCreateOnRampOrderProcedure = "/brij.orders.v1.wallet.WalletService/CreateOnRampOrder"
	// WalletServiceCreateOffRampOrderProcedure is the fully-qualified name of the WalletService's
	// CreateOffRampOrder RPC.
	WalletServiceCreateOffRampOrderProcedure = "/brij.orders.v1.wallet.WalletService/CreateOffRampOrder"
	// WalletServiceGetOrderProcedure is the fully-qualified name of the WalletService's GetOrder RPC.
	WalletServiceGetOrderProcedure = "/brij.orders.v1.wallet.WalletService/GetOrder"
	// WalletServiceGetOrdersProcedure is the fully-qualified name of the WalletService's GetOrders RPC.
	WalletServiceGetOrdersProcedure = "/brij.orders.v1.wallet.WalletService/GetOrders"
	// WalletServiceGetQuoteProcedure is the fully-qualified name of the WalletService's GetQuote RPC.
	WalletServiceGetQuoteProcedure = "/brij.orders.v1.wallet.WalletService/GetQuote"
	// WalletServiceGenerateTransactionProcedure is the fully-qualified name of the WalletService's
	// GenerateTransaction RPC.
	WalletServiceGenerateTransactionProcedure = "/brij.orders.v1.wallet.WalletService/GenerateTransaction"
)

// WalletServiceClient is a client for the brij.orders.v1.wallet.WalletService service.
type WalletServiceClient interface {
	CreateOnRampOrder(context.Context, *connect_go.Request[wallet.CreateOnRampOrderRequest]) (*connect_go.Response[wallet.CreateOnRampOrderResponse], error)
	CreateOffRampOrder(context.Context, *connect_go.Request[wallet.CreateOffRampOrderRequest]) (*connect_go.Response[wallet.CreateOffRampOrderResponse], error)
	GetOrder(context.Context, *connect_go.Request[wallet.GetOrderRequest]) (*connect_go.Response[wallet.GetOrderResponse], error)
	GetOrders(context.Context, *connect_go.Request[wallet.GetOrdersRequest]) (*connect_go.Response[wallet.GetOrdersResponse], error)
	GetQuote(context.Context, *connect_go.Request[wallet.GetQuoteRequest]) (*connect_go.Response[wallet.GetQuoteResponse], error)
	GenerateTransaction(context.Context, *connect_go.Request[wallet.GenerateTransactionRequest]) (*connect_go.Response[wallet.GenerateTransactionResponse], error)
}

// NewWalletServiceClient constructs a client for the brij.orders.v1.wallet.WalletService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWalletServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WalletServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &walletServiceClient{
		createOnRampOrder: connect_go.NewClient[wallet.CreateOnRampOrderRequest, wallet.CreateOnRampOrderResponse](
			httpClient,
			baseURL+WalletServiceCreateOnRampOrderProcedure,
			opts...,
		),
		createOffRampOrder: connect_go.NewClient[wallet.CreateOffRampOrderRequest, wallet.CreateOffRampOrderResponse](
			httpClient,
			baseURL+WalletServiceCreateOffRampOrderProcedure,
			opts...,
		),
		getOrder: connect_go.NewClient[wallet.GetOrderRequest, wallet.GetOrderResponse](
			httpClient,
			baseURL+WalletServiceGetOrderProcedure,
			opts...,
		),
		getOrders: connect_go.NewClient[wallet.GetOrdersRequest, wallet.GetOrdersResponse](
			httpClient,
			baseURL+WalletServiceGetOrdersProcedure,
			opts...,
		),
		getQuote: connect_go.NewClient[wallet.GetQuoteRequest, wallet.GetQuoteResponse](
			httpClient,
			baseURL+WalletServiceGetQuoteProcedure,
			opts...,
		),
		generateTransaction: connect_go.NewClient[wallet.GenerateTransactionRequest, wallet.GenerateTransactionResponse](
			httpClient,
			baseURL+WalletServiceGenerateTransactionProcedure,
			opts...,
		),
	}
}

// walletServiceClient implements WalletServiceClient.
type walletServiceClient struct {
	createOnRampOrder   *connect_go.Client[wallet.CreateOnRampOrderRequest, wallet.CreateOnRampOrderResponse]
	createOffRampOrder  *connect_go.Client[wallet.CreateOffRampOrderRequest, wallet.CreateOffRampOrderResponse]
	getOrder            *connect_go.Client[wallet.GetOrderRequest, wallet.GetOrderResponse]
	getOrders           *connect_go.Client[wallet.GetOrdersRequest, wallet.GetOrdersResponse]
	getQuote            *connect_go.Client[wallet.GetQuoteRequest, wallet.GetQuoteResponse]
	generateTransaction *connect_go.Client[wallet.GenerateTransactionRequest, wallet.GenerateTransactionResponse]
}

// CreateOnRampOrder calls brij.orders.v1.wallet.WalletService.CreateOnRampOrder.
func (c *walletServiceClient) CreateOnRampOrder(ctx context.Context, req *connect_go.Request[wallet.CreateOnRampOrderRequest]) (*connect_go.Response[wallet.CreateOnRampOrderResponse], error) {
	return c.createOnRampOrder.CallUnary(ctx, req)
}

// CreateOffRampOrder calls brij.orders.v1.wallet.WalletService.CreateOffRampOrder.
func (c *walletServiceClient) CreateOffRampOrder(ctx context.Context, req *connect_go.Request[wallet.CreateOffRampOrderRequest]) (*connect_go.Response[wallet.CreateOffRampOrderResponse], error) {
	return c.createOffRampOrder.CallUnary(ctx, req)
}

// GetOrder calls brij.orders.v1.wallet.WalletService.GetOrder.
func (c *walletServiceClient) GetOrder(ctx context.Context, req *connect_go.Request[wallet.GetOrderRequest]) (*connect_go.Response[wallet.GetOrderResponse], error) {
	return c.getOrder.CallUnary(ctx, req)
}

// GetOrders calls brij.orders.v1.wallet.WalletService.GetOrders.
func (c *walletServiceClient) GetOrders(ctx context.Context, req *connect_go.Request[wallet.GetOrdersRequest]) (*connect_go.Response[wallet.GetOrdersResponse], error) {
	return c.getOrders.CallUnary(ctx, req)
}

// GetQuote calls brij.orders.v1.wallet.WalletService.GetQuote.
func (c *walletServiceClient) GetQuote(ctx context.Context, req *connect_go.Request[wallet.GetQuoteRequest]) (*connect_go.Response[wallet.GetQuoteResponse], error) {
	return c.getQuote.CallUnary(ctx, req)
}

// GenerateTransaction calls brij.orders.v1.wallet.WalletService.GenerateTransaction.
func (c *walletServiceClient) GenerateTransaction(ctx context.Context, req *connect_go.Request[wallet.GenerateTransactionRequest]) (*connect_go.Response[wallet.GenerateTransactionResponse], error) {
	return c.generateTransaction.CallUnary(ctx, req)
}

// WalletServiceHandler is an implementation of the brij.orders.v1.wallet.WalletService service.
type WalletServiceHandler interface {
	CreateOnRampOrder(context.Context, *connect_go.Request[wallet.CreateOnRampOrderRequest]) (*connect_go.Response[wallet.CreateOnRampOrderResponse], error)
	CreateOffRampOrder(context.Context, *connect_go.Request[wallet.CreateOffRampOrderRequest]) (*connect_go.Response[wallet.CreateOffRampOrderResponse], error)
	GetOrder(context.Context, *connect_go.Request[wallet.GetOrderRequest]) (*connect_go.Response[wallet.GetOrderResponse], error)
	GetOrders(context.Context, *connect_go.Request[wallet.GetOrdersRequest]) (*connect_go.Response[wallet.GetOrdersResponse], error)
	GetQuote(context.Context, *connect_go.Request[wallet.GetQuoteRequest]) (*connect_go.Response[wallet.GetQuoteResponse], error)
	GenerateTransaction(context.Context, *connect_go.Request[wallet.GenerateTransactionRequest]) (*connect_go.Response[wallet.GenerateTransactionResponse], error)
}

// NewWalletServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWalletServiceHandler(svc WalletServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	walletServiceCreateOnRampOrderHandler := connect_go.NewUnaryHandler(
		WalletServiceCreateOnRampOrderProcedure,
		svc.CreateOnRampOrder,
		opts...,
	)
	walletServiceCreateOffRampOrderHandler := connect_go.NewUnaryHandler(
		WalletServiceCreateOffRampOrderProcedure,
		svc.CreateOffRampOrder,
		opts...,
	)
	walletServiceGetOrderHandler := connect_go.NewUnaryHandler(
		WalletServiceGetOrderProcedure,
		svc.GetOrder,
		opts...,
	)
	walletServiceGetOrdersHandler := connect_go.NewUnaryHandler(
		WalletServiceGetOrdersProcedure,
		svc.GetOrders,
		opts...,
	)
	walletServiceGetQuoteHandler := connect_go.NewUnaryHandler(
		WalletServiceGetQuoteProcedure,
		svc.GetQuote,
		opts...,
	)
	walletServiceGenerateTransactionHandler := connect_go.NewUnaryHandler(
		WalletServiceGenerateTransactionProcedure,
		svc.GenerateTransaction,
		opts...,
	)
	return "/brij.orders.v1.wallet.WalletService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WalletServiceCreateOnRampOrderProcedure:
			walletServiceCreateOnRampOrderHandler.ServeHTTP(w, r)
		case WalletServiceCreateOffRampOrderProcedure:
			walletServiceCreateOffRampOrderHandler.ServeHTTP(w, r)
		case WalletServiceGetOrderProcedure:
			walletServiceGetOrderHandler.ServeHTTP(w, r)
		case WalletServiceGetOrdersProcedure:
			walletServiceGetOrdersHandler.ServeHTTP(w, r)
		case WalletServiceGetQuoteProcedure:
			walletServiceGetQuoteHandler.ServeHTTP(w, r)
		case WalletServiceGenerateTransactionProcedure:
			walletServiceGenerateTransactionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWalletServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWalletServiceHandler struct{}

func (UnimplementedWalletServiceHandler) CreateOnRampOrder(context.Context, *connect_go.Request[wallet.CreateOnRampOrderRequest]) (*connect_go.Response[wallet.CreateOnRampOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.v1.wallet.WalletService.CreateOnRampOrder is not implemented"))
}

func (UnimplementedWalletServiceHandler) CreateOffRampOrder(context.Context, *connect_go.Request[wallet.CreateOffRampOrderRequest]) (*connect_go.Response[wallet.CreateOffRampOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.v1.wallet.WalletService.CreateOffRampOrder is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetOrder(context.Context, *connect_go.Request[wallet.GetOrderRequest]) (*connect_go.Response[wallet.GetOrderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.v1.wallet.WalletService.GetOrder is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetOrders(context.Context, *connect_go.Request[wallet.GetOrdersRequest]) (*connect_go.Response[wallet.GetOrdersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.v1.wallet.WalletService.GetOrders is not implemented"))
}

func (UnimplementedWalletServiceHandler) GetQuote(context.Context, *connect_go.Request[wallet.GetQuoteRequest]) (*connect_go.Response[wallet.GetQuoteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.v1.wallet.WalletService.GetQuote is not implemented"))
}

func (UnimplementedWalletServiceHandler) GenerateTransaction(context.Context, *connect_go.Request[wallet.GenerateTransactionRequest]) (*connect_go.Response[wallet.GenerateTransactionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.v1.wallet.WalletService.GenerateTransaction is not implemented"))
}
