// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/orders/v1/partner/partner.proto

package partnerconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	partner "go.brij.fi/protos/brij/orders/v1/partner"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PartnerServiceName is the fully-qualified name of the PartnerService service.
	PartnerServiceName = "brij.orders.v1.partner.PartnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PartnerServiceGetOrderProcedure is the fully-qualified name of the PartnerService's GetOrder RPC.
	PartnerServiceGetOrderProcedure = "/brij.orders.v1.partner.PartnerService/GetOrder"
	// PartnerServiceAcceptOrderProcedure is the fully-qualified name of the PartnerService's
	// AcceptOrder RPC.
	PartnerServiceAcceptOrderProcedure = "/brij.orders.v1.partner.PartnerService/AcceptOrder"
	// PartnerServiceRejectOrderProcedure is the fully-qualified name of the PartnerService's
	// RejectOrder RPC.
	PartnerServiceRejectOrderProcedure = "/brij.orders.v1.partner.PartnerService/RejectOrder"
	// PartnerServiceCompleteOrderProcedure is the fully-qualified name of the PartnerService's
	// CompleteOrder RPC.
	PartnerServiceCompleteOrderProcedure = "/brij.orders.v1.partner.PartnerService/CompleteOrder"
	// PartnerServiceFailOrderProcedure is the fully-qualified name of the PartnerService's FailOrder
	// RPC.
	PartnerServiceFailOrderProcedure = "/brij.orders.v1.partner.PartnerService/FailOrder"
	// PartnerServiceGetOrdersProcedure is the fully-qualified name of the PartnerService's GetOrders
	// RPC.
	PartnerServiceGetOrdersProcedure = "/brij.orders.v1.partner.PartnerService/GetOrders"
	// PartnerServiceUpdateFeesProcedure is the fully-qualified name of the PartnerService's UpdateFees
	// RPC.
	PartnerServiceUpdateFeesProcedure = "/brij.orders.v1.partner.PartnerService/UpdateFees"
	// PartnerServiceGenerateTransactionProcedure is the fully-qualified name of the PartnerService's
	// GenerateTransaction RPC.
	PartnerServiceGenerateTransactionProcedure = "/brij.orders.v1.partner.PartnerService/GenerateTransaction"
)

// PartnerServiceClient is a client for the brij.orders.v1.partner.PartnerService service.
type PartnerServiceClient interface {
	GetOrder(context.Context, *connect.Request[partner.GetOrderRequest]) (*connect.Response[partner.GetOrderResponse], error)
	AcceptOrder(context.Context, *connect.Request[partner.AcceptOrderRequest]) (*connect.Response[partner.AcceptOrderResponse], error)
	RejectOrder(context.Context, *connect.Request[partner.RejectOrderRequest]) (*connect.Response[partner.RejectOrderResponse], error)
	CompleteOrder(context.Context, *connect.Request[partner.CompleteOrderRequest]) (*connect.Response[partner.CompleteOrderResponse], error)
	FailOrder(context.Context, *connect.Request[partner.FailOrderRequest]) (*connect.Response[partner.FailOrderResponse], error)
	GetOrders(context.Context, *connect.Request[partner.GetOrdersRequest]) (*connect.Response[partner.GetOrdersResponse], error)
	UpdateFees(context.Context, *connect.Request[partner.UpdateFeesRequest]) (*connect.Response[partner.UpdateFeesResponse], error)
	GenerateTransaction(context.Context, *connect.Request[partner.GenerateTransactionRequest]) (*connect.Response[partner.GenerateTransactionResponse], error)
}

// NewPartnerServiceClient constructs a client for the brij.orders.v1.partner.PartnerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPartnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PartnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	partnerServiceMethods := partner.File_brij_orders_v1_partner_partner_proto.Services().ByName("PartnerService").Methods()
	return &partnerServiceClient{
		getOrder: connect.NewClient[partner.GetOrderRequest, partner.GetOrderResponse](
			httpClient,
			baseURL+PartnerServiceGetOrderProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("GetOrder")),
			connect.WithClientOptions(opts...),
		),
		acceptOrder: connect.NewClient[partner.AcceptOrderRequest, partner.AcceptOrderResponse](
			httpClient,
			baseURL+PartnerServiceAcceptOrderProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("AcceptOrder")),
			connect.WithClientOptions(opts...),
		),
		rejectOrder: connect.NewClient[partner.RejectOrderRequest, partner.RejectOrderResponse](
			httpClient,
			baseURL+PartnerServiceRejectOrderProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("RejectOrder")),
			connect.WithClientOptions(opts...),
		),
		completeOrder: connect.NewClient[partner.CompleteOrderRequest, partner.CompleteOrderResponse](
			httpClient,
			baseURL+PartnerServiceCompleteOrderProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("CompleteOrder")),
			connect.WithClientOptions(opts...),
		),
		failOrder: connect.NewClient[partner.FailOrderRequest, partner.FailOrderResponse](
			httpClient,
			baseURL+PartnerServiceFailOrderProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("FailOrder")),
			connect.WithClientOptions(opts...),
		),
		getOrders: connect.NewClient[partner.GetOrdersRequest, partner.GetOrdersResponse](
			httpClient,
			baseURL+PartnerServiceGetOrdersProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("GetOrders")),
			connect.WithClientOptions(opts...),
		),
		updateFees: connect.NewClient[partner.UpdateFeesRequest, partner.UpdateFeesResponse](
			httpClient,
			baseURL+PartnerServiceUpdateFeesProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("UpdateFees")),
			connect.WithClientOptions(opts...),
		),
		generateTransaction: connect.NewClient[partner.GenerateTransactionRequest, partner.GenerateTransactionResponse](
			httpClient,
			baseURL+PartnerServiceGenerateTransactionProcedure,
			connect.WithSchema(partnerServiceMethods.ByName("GenerateTransaction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// partnerServiceClient implements PartnerServiceClient.
type partnerServiceClient struct {
	getOrder            *connect.Client[partner.GetOrderRequest, partner.GetOrderResponse]
	acceptOrder         *connect.Client[partner.AcceptOrderRequest, partner.AcceptOrderResponse]
	rejectOrder         *connect.Client[partner.RejectOrderRequest, partner.RejectOrderResponse]
	completeOrder       *connect.Client[partner.CompleteOrderRequest, partner.CompleteOrderResponse]
	failOrder           *connect.Client[partner.FailOrderRequest, partner.FailOrderResponse]
	getOrders           *connect.Client[partner.GetOrdersRequest, partner.GetOrdersResponse]
	updateFees          *connect.Client[partner.UpdateFeesRequest, partner.UpdateFeesResponse]
	generateTransaction *connect.Client[partner.GenerateTransactionRequest, partner.GenerateTransactionResponse]
}

// GetOrder calls brij.orders.v1.partner.PartnerService.GetOrder.
func (c *partnerServiceClient) GetOrder(ctx context.Context, req *connect.Request[partner.GetOrderRequest]) (*connect.Response[partner.GetOrderResponse], error) {
	return c.getOrder.CallUnary(ctx, req)
}

// AcceptOrder calls brij.orders.v1.partner.PartnerService.AcceptOrder.
func (c *partnerServiceClient) AcceptOrder(ctx context.Context, req *connect.Request[partner.AcceptOrderRequest]) (*connect.Response[partner.AcceptOrderResponse], error) {
	return c.acceptOrder.CallUnary(ctx, req)
}

// RejectOrder calls brij.orders.v1.partner.PartnerService.RejectOrder.
func (c *partnerServiceClient) RejectOrder(ctx context.Context, req *connect.Request[partner.RejectOrderRequest]) (*connect.Response[partner.RejectOrderResponse], error) {
	return c.rejectOrder.CallUnary(ctx, req)
}

// CompleteOrder calls brij.orders.v1.partner.PartnerService.CompleteOrder.
func (c *partnerServiceClient) CompleteOrder(ctx context.Context, req *connect.Request[partner.CompleteOrderRequest]) (*connect.Response[partner.CompleteOrderResponse], error) {
	return c.completeOrder.CallUnary(ctx, req)
}

// FailOrder calls brij.orders.v1.partner.PartnerService.FailOrder.
func (c *partnerServiceClient) FailOrder(ctx context.Context, req *connect.Request[partner.FailOrderRequest]) (*connect.Response[partner.FailOrderResponse], error) {
	return c.failOrder.CallUnary(ctx, req)
}

// GetOrders calls brij.orders.v1.partner.PartnerService.GetOrders.
func (c *partnerServiceClient) GetOrders(ctx context.Context, req *connect.Request[partner.GetOrdersRequest]) (*connect.Response[partner.GetOrdersResponse], error) {
	return c.getOrders.CallUnary(ctx, req)
}

// UpdateFees calls brij.orders.v1.partner.PartnerService.UpdateFees.
func (c *partnerServiceClient) UpdateFees(ctx context.Context, req *connect.Request[partner.UpdateFeesRequest]) (*connect.Response[partner.UpdateFeesResponse], error) {
	return c.updateFees.CallUnary(ctx, req)
}

// GenerateTransaction calls brij.orders.v1.partner.PartnerService.GenerateTransaction.
func (c *partnerServiceClient) GenerateTransaction(ctx context.Context, req *connect.Request[partner.GenerateTransactionRequest]) (*connect.Response[partner.GenerateTransactionResponse], error) {
	return c.generateTransaction.CallUnary(ctx, req)
}

// PartnerServiceHandler is an implementation of the brij.orders.v1.partner.PartnerService service.
type PartnerServiceHandler interface {
	GetOrder(context.Context, *connect.Request[partner.GetOrderRequest]) (*connect.Response[partner.GetOrderResponse], error)
	AcceptOrder(context.Context, *connect.Request[partner.AcceptOrderRequest]) (*connect.Response[partner.AcceptOrderResponse], error)
	RejectOrder(context.Context, *connect.Request[partner.RejectOrderRequest]) (*connect.Response[partner.RejectOrderResponse], error)
	CompleteOrder(context.Context, *connect.Request[partner.CompleteOrderRequest]) (*connect.Response[partner.CompleteOrderResponse], error)
	FailOrder(context.Context, *connect.Request[partner.FailOrderRequest]) (*connect.Response[partner.FailOrderResponse], error)
	GetOrders(context.Context, *connect.Request[partner.GetOrdersRequest]) (*connect.Response[partner.GetOrdersResponse], error)
	UpdateFees(context.Context, *connect.Request[partner.UpdateFeesRequest]) (*connect.Response[partner.UpdateFeesResponse], error)
	GenerateTransaction(context.Context, *connect.Request[partner.GenerateTransactionRequest]) (*connect.Response[partner.GenerateTransactionResponse], error)
}

// NewPartnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPartnerServiceHandler(svc PartnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	partnerServiceMethods := partner.File_brij_orders_v1_partner_partner_proto.Services().ByName("PartnerService").Methods()
	partnerServiceGetOrderHandler := connect.NewUnaryHandler(
		PartnerServiceGetOrderProcedure,
		svc.GetOrder,
		connect.WithSchema(partnerServiceMethods.ByName("GetOrder")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceAcceptOrderHandler := connect.NewUnaryHandler(
		PartnerServiceAcceptOrderProcedure,
		svc.AcceptOrder,
		connect.WithSchema(partnerServiceMethods.ByName("AcceptOrder")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceRejectOrderHandler := connect.NewUnaryHandler(
		PartnerServiceRejectOrderProcedure,
		svc.RejectOrder,
		connect.WithSchema(partnerServiceMethods.ByName("RejectOrder")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceCompleteOrderHandler := connect.NewUnaryHandler(
		PartnerServiceCompleteOrderProcedure,
		svc.CompleteOrder,
		connect.WithSchema(partnerServiceMethods.ByName("CompleteOrder")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceFailOrderHandler := connect.NewUnaryHandler(
		PartnerServiceFailOrderProcedure,
		svc.FailOrder,
		connect.WithSchema(partnerServiceMethods.ByName("FailOrder")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceGetOrdersHandler := connect.NewUnaryHandler(
		PartnerServiceGetOrdersProcedure,
		svc.GetOrders,
		connect.WithSchema(partnerServiceMethods.ByName("GetOrders")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceUpdateFeesHandler := connect.NewUnaryHandler(
		PartnerServiceUpdateFeesProcedure,
		svc.UpdateFees,
		connect.WithSchema(partnerServiceMethods.ByName("UpdateFees")),
		connect.WithHandlerOptions(opts...),
	)
	partnerServiceGenerateTransactionHandler := connect.NewUnaryHandler(
		PartnerServiceGenerateTransactionProcedure,
		svc.GenerateTransaction,
		connect.WithSchema(partnerServiceMethods.ByName("GenerateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/brij.orders.v1.partner.PartnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PartnerServiceGetOrderProcedure:
			partnerServiceGetOrderHandler.ServeHTTP(w, r)
		case PartnerServiceAcceptOrderProcedure:
			partnerServiceAcceptOrderHandler.ServeHTTP(w, r)
		case PartnerServiceRejectOrderProcedure:
			partnerServiceRejectOrderHandler.ServeHTTP(w, r)
		case PartnerServiceCompleteOrderProcedure:
			partnerServiceCompleteOrderHandler.ServeHTTP(w, r)
		case PartnerServiceFailOrderProcedure:
			partnerServiceFailOrderHandler.ServeHTTP(w, r)
		case PartnerServiceGetOrdersProcedure:
			partnerServiceGetOrdersHandler.ServeHTTP(w, r)
		case PartnerServiceUpdateFeesProcedure:
			partnerServiceUpdateFeesHandler.ServeHTTP(w, r)
		case PartnerServiceGenerateTransactionProcedure:
			partnerServiceGenerateTransactionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPartnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPartnerServiceHandler struct{}

func (UnimplementedPartnerServiceHandler) GetOrder(context.Context, *connect.Request[partner.GetOrderRequest]) (*connect.Response[partner.GetOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.GetOrder is not implemented"))
}

func (UnimplementedPartnerServiceHandler) AcceptOrder(context.Context, *connect.Request[partner.AcceptOrderRequest]) (*connect.Response[partner.AcceptOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.AcceptOrder is not implemented"))
}

func (UnimplementedPartnerServiceHandler) RejectOrder(context.Context, *connect.Request[partner.RejectOrderRequest]) (*connect.Response[partner.RejectOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.RejectOrder is not implemented"))
}

func (UnimplementedPartnerServiceHandler) CompleteOrder(context.Context, *connect.Request[partner.CompleteOrderRequest]) (*connect.Response[partner.CompleteOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.CompleteOrder is not implemented"))
}

func (UnimplementedPartnerServiceHandler) FailOrder(context.Context, *connect.Request[partner.FailOrderRequest]) (*connect.Response[partner.FailOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.FailOrder is not implemented"))
}

func (UnimplementedPartnerServiceHandler) GetOrders(context.Context, *connect.Request[partner.GetOrdersRequest]) (*connect.Response[partner.GetOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.GetOrders is not implemented"))
}

func (UnimplementedPartnerServiceHandler) UpdateFees(context.Context, *connect.Request[partner.UpdateFeesRequest]) (*connect.Response[partner.UpdateFeesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.UpdateFees is not implemented"))
}

func (UnimplementedPartnerServiceHandler) GenerateTransaction(context.Context, *connect.Request[partner.GenerateTransactionRequest]) (*connect.Response[partner.GenerateTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("brij.orders.v1.partner.PartnerService.GenerateTransaction is not implemented"))
}
