// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: brij/orders/v1/common/envelopes.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnRampOrderUserEnvelope struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OrderId          string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	PartnerPublicKey string                 `protobuf:"bytes,2,opt,name=partner_public_key,json=partnerPublicKey,proto3" json:"partner_public_key,omitempty"`
	// Exact crypto amount that user will receive to their wallet.
	CryptoAmount   float64 `protobuf:"fixed64,3,opt,name=crypto_amount,json=cryptoAmount,proto3" json:"crypto_amount,omitempty"`
	CryptoCurrency string  `protobuf:"bytes,4,opt,name=crypto_currency,json=cryptoCurrency,proto3" json:"crypto_currency,omitempty"`
	// Exact fiat amount that user will pay to the partner.
	FiatAmount         float64 `protobuf:"fixed64,5,opt,name=fiat_amount,json=fiatAmount,proto3" json:"fiat_amount,omitempty"`
	FiatCurrency       string  `protobuf:"bytes,6,opt,name=fiat_currency,json=fiatCurrency,proto3" json:"fiat_currency,omitempty"`
	UserWalletAddress  string  `protobuf:"bytes,8,opt,name=user_wallet_address,json=userWalletAddress,proto3" json:"user_wallet_address,omitempty"`
	WalletPublicKey    string  `protobuf:"bytes,9,opt,name=wallet_public_key,json=walletPublicKey,proto3" json:"wallet_public_key,omitempty"`
	WalletFeeAddress   string  `protobuf:"bytes,10,opt,name=wallet_fee_address,json=walletFeeAddress,proto3" json:"wallet_fee_address,omitempty"`
	WalletFeeAmount    float64 `protobuf:"fixed64,11,opt,name=wallet_fee_amount,json=walletFeeAmount,proto3" json:"wallet_fee_amount,omitempty"`
	PlatformFeeAddress string  `protobuf:"bytes,12,opt,name=platform_fee_address,json=platformFeeAddress,proto3" json:"platform_fee_address,omitempty"`
	PlatformFeeAmount  float64 `protobuf:"fixed64,13,opt,name=platform_fee_amount,json=platformFeeAmount,proto3" json:"platform_fee_amount,omitempty"`
	// Exact crypto amount that partner will spend, which may differ from the crypto_amount due to fees.
	PartnerCryptoAmount float64 `protobuf:"fixed64,14,opt,name=partner_crypto_amount,json=partnerCryptoAmount,proto3" json:"partner_crypto_amount,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OnRampOrderUserEnvelope) Reset() {
	*x = OnRampOrderUserEnvelope{}
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnRampOrderUserEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnRampOrderUserEnvelope) ProtoMessage() {}

func (x *OnRampOrderUserEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnRampOrderUserEnvelope.ProtoReflect.Descriptor instead.
func (*OnRampOrderUserEnvelope) Descriptor() ([]byte, []int) {
	return file_brij_orders_v1_common_envelopes_proto_rawDescGZIP(), []int{0}
}

func (x *OnRampOrderUserEnvelope) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetPartnerPublicKey() string {
	if x != nil {
		return x.PartnerPublicKey
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetCryptoAmount() float64 {
	if x != nil {
		return x.CryptoAmount
	}
	return 0
}

func (x *OnRampOrderUserEnvelope) GetCryptoCurrency() string {
	if x != nil {
		return x.CryptoCurrency
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetFiatAmount() float64 {
	if x != nil {
		return x.FiatAmount
	}
	return 0
}

func (x *OnRampOrderUserEnvelope) GetFiatCurrency() string {
	if x != nil {
		return x.FiatCurrency
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetUserWalletAddress() string {
	if x != nil {
		return x.UserWalletAddress
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetWalletPublicKey() string {
	if x != nil {
		return x.WalletPublicKey
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetWalletFeeAddress() string {
	if x != nil {
		return x.WalletFeeAddress
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetWalletFeeAmount() float64 {
	if x != nil {
		return x.WalletFeeAmount
	}
	return 0
}

func (x *OnRampOrderUserEnvelope) GetPlatformFeeAddress() string {
	if x != nil {
		return x.PlatformFeeAddress
	}
	return ""
}

func (x *OnRampOrderUserEnvelope) GetPlatformFeeAmount() float64 {
	if x != nil {
		return x.PlatformFeeAmount
	}
	return 0
}

func (x *OnRampOrderUserEnvelope) GetPartnerCryptoAmount() float64 {
	if x != nil {
		return x.PartnerCryptoAmount
	}
	return 0
}

type OffRampOrderUserEnvelope struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OrderId          string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	PartnerPublicKey string                 `protobuf:"bytes,2,opt,name=partner_public_key,json=partnerPublicKey,proto3" json:"partner_public_key,omitempty"`
	// Exact crypto amount that user will spend from their wallet.
	CryptoAmount   float64 `protobuf:"fixed64,3,opt,name=crypto_amount,json=cryptoAmount,proto3" json:"crypto_amount,omitempty"`
	CryptoCurrency string  `protobuf:"bytes,4,opt,name=crypto_currency,json=cryptoCurrency,proto3" json:"crypto_currency,omitempty"`
	// Exact fiat amount that user will receive to their bank account.
	FiatAmount         float64 `protobuf:"fixed64,5,opt,name=fiat_amount,json=fiatAmount,proto3" json:"fiat_amount,omitempty"`
	FiatCurrency       string  `protobuf:"bytes,6,opt,name=fiat_currency,json=fiatCurrency,proto3" json:"fiat_currency,omitempty"`
	BankDataHash       string  `protobuf:"bytes,7,opt,name=bank_data_hash,json=bankDataHash,proto3" json:"bank_data_hash,omitempty"`
	UserWalletAddress  string  `protobuf:"bytes,8,opt,name=user_wallet_address,json=userWalletAddress,proto3" json:"user_wallet_address,omitempty"`
	WalletPublicKey    string  `protobuf:"bytes,9,opt,name=wallet_public_key,json=walletPublicKey,proto3" json:"wallet_public_key,omitempty"`
	WalletFeeAddress   string  `protobuf:"bytes,10,opt,name=wallet_fee_address,json=walletFeeAddress,proto3" json:"wallet_fee_address,omitempty"`
	WalletFeeAmount    float64 `protobuf:"fixed64,11,opt,name=wallet_fee_amount,json=walletFeeAmount,proto3" json:"wallet_fee_amount,omitempty"`
	PlatformFeeAddress string  `protobuf:"bytes,12,opt,name=platform_fee_address,json=platformFeeAddress,proto3" json:"platform_fee_address,omitempty"`
	PlatformFeeAmount  float64 `protobuf:"fixed64,13,opt,name=platform_fee_amount,json=platformFeeAmount,proto3" json:"platform_fee_amount,omitempty"`
	// Exact crypto amount that partner will receive, which may differ from the crypto_amount due to fees.
	PartnerCryptoAmount float64 `protobuf:"fixed64,14,opt,name=partner_crypto_amount,json=partnerCryptoAmount,proto3" json:"partner_crypto_amount,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OffRampOrderUserEnvelope) Reset() {
	*x = OffRampOrderUserEnvelope{}
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffRampOrderUserEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffRampOrderUserEnvelope) ProtoMessage() {}

func (x *OffRampOrderUserEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffRampOrderUserEnvelope.ProtoReflect.Descriptor instead.
func (*OffRampOrderUserEnvelope) Descriptor() ([]byte, []int) {
	return file_brij_orders_v1_common_envelopes_proto_rawDescGZIP(), []int{1}
}

func (x *OffRampOrderUserEnvelope) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetPartnerPublicKey() string {
	if x != nil {
		return x.PartnerPublicKey
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetCryptoAmount() float64 {
	if x != nil {
		return x.CryptoAmount
	}
	return 0
}

func (x *OffRampOrderUserEnvelope) GetCryptoCurrency() string {
	if x != nil {
		return x.CryptoCurrency
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetFiatAmount() float64 {
	if x != nil {
		return x.FiatAmount
	}
	return 0
}

func (x *OffRampOrderUserEnvelope) GetFiatCurrency() string {
	if x != nil {
		return x.FiatCurrency
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetBankDataHash() string {
	if x != nil {
		return x.BankDataHash
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetUserWalletAddress() string {
	if x != nil {
		return x.UserWalletAddress
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetWalletPublicKey() string {
	if x != nil {
		return x.WalletPublicKey
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetWalletFeeAddress() string {
	if x != nil {
		return x.WalletFeeAddress
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetWalletFeeAmount() float64 {
	if x != nil {
		return x.WalletFeeAmount
	}
	return 0
}

func (x *OffRampOrderUserEnvelope) GetPlatformFeeAddress() string {
	if x != nil {
		return x.PlatformFeeAddress
	}
	return ""
}

func (x *OffRampOrderUserEnvelope) GetPlatformFeeAmount() float64 {
	if x != nil {
		return x.PlatformFeeAmount
	}
	return 0
}

func (x *OffRampOrderUserEnvelope) GetPartnerCryptoAmount() float64 {
	if x != nil {
		return x.PartnerCryptoAmount
	}
	return 0
}

type OnRampOrderPartnerEnvelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	BankName      string                 `protobuf:"bytes,2,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankAccount   string                 `protobuf:"bytes,3,opt,name=bank_account,json=bankAccount,proto3" json:"bank_account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnRampOrderPartnerEnvelope) Reset() {
	*x = OnRampOrderPartnerEnvelope{}
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnRampOrderPartnerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnRampOrderPartnerEnvelope) ProtoMessage() {}

func (x *OnRampOrderPartnerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnRampOrderPartnerEnvelope.ProtoReflect.Descriptor instead.
func (*OnRampOrderPartnerEnvelope) Descriptor() ([]byte, []int) {
	return file_brij_orders_v1_common_envelopes_proto_rawDescGZIP(), []int{2}
}

func (x *OnRampOrderPartnerEnvelope) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OnRampOrderPartnerEnvelope) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *OnRampOrderPartnerEnvelope) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

type OffRampOrderPartnerEnvelope struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	OrderId             string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	CryptoWalletAddress string                 `protobuf:"bytes,2,opt,name=crypto_wallet_address,json=cryptoWalletAddress,proto3" json:"crypto_wallet_address,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OffRampOrderPartnerEnvelope) Reset() {
	*x = OffRampOrderPartnerEnvelope{}
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OffRampOrderPartnerEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffRampOrderPartnerEnvelope) ProtoMessage() {}

func (x *OffRampOrderPartnerEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_brij_orders_v1_common_envelopes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffRampOrderPartnerEnvelope.ProtoReflect.Descriptor instead.
func (*OffRampOrderPartnerEnvelope) Descriptor() ([]byte, []int) {
	return file_brij_orders_v1_common_envelopes_proto_rawDescGZIP(), []int{3}
}

func (x *OffRampOrderPartnerEnvelope) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OffRampOrderPartnerEnvelope) GetCryptoWalletAddress() string {
	if x != nil {
		return x.CryptoWalletAddress
	}
	return ""
}

var File_brij_orders_v1_common_envelopes_proto protoreflect.FileDescriptor

const file_brij_orders_v1_common_envelopes_proto_rawDesc = "" +
	"\n" +
	"%brij/orders/v1/common/envelopes.proto\x12\x15brij.orders.v1.common\"\xc2\x04\n" +
	"\x17OnRampOrderUserEnvelope\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12,\n" +
	"\x12partner_public_key\x18\x02 \x01(\tR\x10partnerPublicKey\x12#\n" +
	"\rcrypto_amount\x18\x03 \x01(\x01R\fcryptoAmount\x12'\n" +
	"\x0fcrypto_currency\x18\x04 \x01(\tR\x0ecryptoCurrency\x12\x1f\n" +
	"\vfiat_amount\x18\x05 \x01(\x01R\n" +
	"fiatAmount\x12#\n" +
	"\rfiat_currency\x18\x06 \x01(\tR\ffiatCurrency\x12.\n" +
	"\x13user_wallet_address\x18\b \x01(\tR\x11userWalletAddress\x12*\n" +
	"\x11wallet_public_key\x18\t \x01(\tR\x0fwalletPublicKey\x12,\n" +
	"\x12wallet_fee_address\x18\n" +
	" \x01(\tR\x10walletFeeAddress\x12*\n" +
	"\x11wallet_fee_amount\x18\v \x01(\x01R\x0fwalletFeeAmount\x120\n" +
	"\x14platform_fee_address\x18\f \x01(\tR\x12platformFeeAddress\x12.\n" +
	"\x13platform_fee_amount\x18\r \x01(\x01R\x11platformFeeAmount\x122\n" +
	"\x15partner_crypto_amount\x18\x0e \x01(\x01R\x13partnerCryptoAmount\"\xe9\x04\n" +
	"\x18OffRampOrderUserEnvelope\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12,\n" +
	"\x12partner_public_key\x18\x02 \x01(\tR\x10partnerPublicKey\x12#\n" +
	"\rcrypto_amount\x18\x03 \x01(\x01R\fcryptoAmount\x12'\n" +
	"\x0fcrypto_currency\x18\x04 \x01(\tR\x0ecryptoCurrency\x12\x1f\n" +
	"\vfiat_amount\x18\x05 \x01(\x01R\n" +
	"fiatAmount\x12#\n" +
	"\rfiat_currency\x18\x06 \x01(\tR\ffiatCurrency\x12$\n" +
	"\x0ebank_data_hash\x18\a \x01(\tR\fbankDataHash\x12.\n" +
	"\x13user_wallet_address\x18\b \x01(\tR\x11userWalletAddress\x12*\n" +
	"\x11wallet_public_key\x18\t \x01(\tR\x0fwalletPublicKey\x12,\n" +
	"\x12wallet_fee_address\x18\n" +
	" \x01(\tR\x10walletFeeAddress\x12*\n" +
	"\x11wallet_fee_amount\x18\v \x01(\x01R\x0fwalletFeeAmount\x120\n" +
	"\x14platform_fee_address\x18\f \x01(\tR\x12platformFeeAddress\x12.\n" +
	"\x13platform_fee_amount\x18\r \x01(\x01R\x11platformFeeAmount\x122\n" +
	"\x15partner_crypto_amount\x18\x0e \x01(\x01R\x13partnerCryptoAmount\"w\n" +
	"\x1aOnRampOrderPartnerEnvelope\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x12\x1b\n" +
	"\tbank_name\x18\x02 \x01(\tR\bbankName\x12!\n" +
	"\fbank_account\x18\x03 \x01(\tR\vbankAccount\"l\n" +
	"\x1bOffRampOrderPartnerEnvelope\x12\x19\n" +
	"\border_id\x18\x01 \x01(\tR\aorderId\x122\n" +
	"\x15crypto_wallet_address\x18\x02 \x01(\tR\x13cryptoWalletAddressB)Z'go.brij.fi/protos/brij/orders/v1/commonb\x06proto3"

var (
	file_brij_orders_v1_common_envelopes_proto_rawDescOnce sync.Once
	file_brij_orders_v1_common_envelopes_proto_rawDescData []byte
)

func file_brij_orders_v1_common_envelopes_proto_rawDescGZIP() []byte {
	file_brij_orders_v1_common_envelopes_proto_rawDescOnce.Do(func() {
		file_brij_orders_v1_common_envelopes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_brij_orders_v1_common_envelopes_proto_rawDesc), len(file_brij_orders_v1_common_envelopes_proto_rawDesc)))
	})
	return file_brij_orders_v1_common_envelopes_proto_rawDescData
}

var file_brij_orders_v1_common_envelopes_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_brij_orders_v1_common_envelopes_proto_goTypes = []any{
	(*OnRampOrderUserEnvelope)(nil),     // 0: brij.orders.v1.common.OnRampOrderUserEnvelope
	(*OffRampOrderUserEnvelope)(nil),    // 1: brij.orders.v1.common.OffRampOrderUserEnvelope
	(*OnRampOrderPartnerEnvelope)(nil),  // 2: brij.orders.v1.common.OnRampOrderPartnerEnvelope
	(*OffRampOrderPartnerEnvelope)(nil), // 3: brij.orders.v1.common.OffRampOrderPartnerEnvelope
}
var file_brij_orders_v1_common_envelopes_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_brij_orders_v1_common_envelopes_proto_init() }
func file_brij_orders_v1_common_envelopes_proto_init() {
	if File_brij_orders_v1_common_envelopes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_brij_orders_v1_common_envelopes_proto_rawDesc), len(file_brij_orders_v1_common_envelopes_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_brij_orders_v1_common_envelopes_proto_goTypes,
		DependencyIndexes: file_brij_orders_v1_common_envelopes_proto_depIdxs,
		MessageInfos:      file_brij_orders_v1_common_envelopes_proto_msgTypes,
	}.Build()
	File_brij_orders_v1_common_envelopes_proto = out.File
	file_brij_orders_v1_common_envelopes_proto_goTypes = nil
	file_brij_orders_v1_common_envelopes_proto_depIdxs = nil
}
