// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: brij/orders/manage/v1/service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "go.brij.fi/protos/brij/orders/manage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ManageServiceName is the fully-qualified name of the ManageService service.
	ManageServiceName = "brij.orders.manage.v1.ManageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManageServiceNotifyPartnerProcedure is the fully-qualified name of the ManageService's
	// NotifyPartner RPC.
	ManageServiceNotifyPartnerProcedure = "/brij.orders.manage.v1.ManageService/NotifyPartner"
	// ManageServiceCheckStaleOrdersProcedure is the fully-qualified name of the ManageService's
	// CheckStaleOrders RPC.
	ManageServiceCheckStaleOrdersProcedure = "/brij.orders.manage.v1.ManageService/CheckStaleOrders"
)

// ManageServiceClient is a client for the brij.orders.manage.v1.ManageService service.
type ManageServiceClient interface {
	NotifyPartner(context.Context, *connect_go.Request[v1.NotifyPartnerRequest]) (*connect_go.Response[v1.NotifyPartnerResponse], error)
	CheckStaleOrders(context.Context, *connect_go.Request[v1.CheckStaleOrdersRequest]) (*connect_go.Response[v1.CheckStaleOrdersResponse], error)
}

// NewManageServiceClient constructs a client for the brij.orders.manage.v1.ManageService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ManageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &manageServiceClient{
		notifyPartner: connect_go.NewClient[v1.NotifyPartnerRequest, v1.NotifyPartnerResponse](
			httpClient,
			baseURL+ManageServiceNotifyPartnerProcedure,
			opts...,
		),
		checkStaleOrders: connect_go.NewClient[v1.CheckStaleOrdersRequest, v1.CheckStaleOrdersResponse](
			httpClient,
			baseURL+ManageServiceCheckStaleOrdersProcedure,
			opts...,
		),
	}
}

// manageServiceClient implements ManageServiceClient.
type manageServiceClient struct {
	notifyPartner    *connect_go.Client[v1.NotifyPartnerRequest, v1.NotifyPartnerResponse]
	checkStaleOrders *connect_go.Client[v1.CheckStaleOrdersRequest, v1.CheckStaleOrdersResponse]
}

// NotifyPartner calls brij.orders.manage.v1.ManageService.NotifyPartner.
func (c *manageServiceClient) NotifyPartner(ctx context.Context, req *connect_go.Request[v1.NotifyPartnerRequest]) (*connect_go.Response[v1.NotifyPartnerResponse], error) {
	return c.notifyPartner.CallUnary(ctx, req)
}

// CheckStaleOrders calls brij.orders.manage.v1.ManageService.CheckStaleOrders.
func (c *manageServiceClient) CheckStaleOrders(ctx context.Context, req *connect_go.Request[v1.CheckStaleOrdersRequest]) (*connect_go.Response[v1.CheckStaleOrdersResponse], error) {
	return c.checkStaleOrders.CallUnary(ctx, req)
}

// ManageServiceHandler is an implementation of the brij.orders.manage.v1.ManageService service.
type ManageServiceHandler interface {
	NotifyPartner(context.Context, *connect_go.Request[v1.NotifyPartnerRequest]) (*connect_go.Response[v1.NotifyPartnerResponse], error)
	CheckStaleOrders(context.Context, *connect_go.Request[v1.CheckStaleOrdersRequest]) (*connect_go.Response[v1.CheckStaleOrdersResponse], error)
}

// NewManageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManageServiceHandler(svc ManageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	manageServiceNotifyPartnerHandler := connect_go.NewUnaryHandler(
		ManageServiceNotifyPartnerProcedure,
		svc.NotifyPartner,
		opts...,
	)
	manageServiceCheckStaleOrdersHandler := connect_go.NewUnaryHandler(
		ManageServiceCheckStaleOrdersProcedure,
		svc.CheckStaleOrders,
		opts...,
	)
	return "/brij.orders.manage.v1.ManageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManageServiceNotifyPartnerProcedure:
			manageServiceNotifyPartnerHandler.ServeHTTP(w, r)
		case ManageServiceCheckStaleOrdersProcedure:
			manageServiceCheckStaleOrdersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManageServiceHandler struct{}

func (UnimplementedManageServiceHandler) NotifyPartner(context.Context, *connect_go.Request[v1.NotifyPartnerRequest]) (*connect_go.Response[v1.NotifyPartnerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.manage.v1.ManageService.NotifyPartner is not implemented"))
}

func (UnimplementedManageServiceHandler) CheckStaleOrders(context.Context, *connect_go.Request[v1.CheckStaleOrdersRequest]) (*connect_go.Response[v1.CheckStaleOrdersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("brij.orders.manage.v1.ManageService.CheckStaleOrders is not implemented"))
}
