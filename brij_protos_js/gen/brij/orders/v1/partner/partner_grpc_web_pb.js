/**
 * @fileoverview gRPC-Web generated client stub for brij.orders.v1.partner
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: brij/orders/v1/partner/partner.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var brij_orders_v1_common_ramp_type_pb = require('../../../../brij/orders/v1/common/ramp_type_pb.js')

var google_api_annotations_pb = require('../../../../google/api/annotations_pb.js')
const proto = {};
proto.brij = {};
proto.brij.orders = {};
proto.brij.orders.v1 = {};
proto.brij.orders.v1.partner = require('./partner_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.brij.orders.v1.partner.PartnerServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.GetOrderRequest,
 *   !proto.brij.orders.v1.partner.GetOrderResponse>}
 */
const methodDescriptor_PartnerService_GetOrder = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/GetOrder',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.GetOrderRequest,
  proto.brij.orders.v1.partner.GetOrderResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.GetOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.GetOrderResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.GetOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.GetOrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.GetOrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.getOrder =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/GetOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_GetOrder,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.GetOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.GetOrderResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.getOrder =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/GetOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_GetOrder);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.AcceptOrderRequest,
 *   !proto.brij.orders.v1.partner.AcceptOrderResponse>}
 */
const methodDescriptor_PartnerService_AcceptOrder = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/AcceptOrder',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.AcceptOrderRequest,
  proto.brij.orders.v1.partner.AcceptOrderResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.AcceptOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.AcceptOrderResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.AcceptOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.AcceptOrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.AcceptOrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.acceptOrder =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/AcceptOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_AcceptOrder,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.AcceptOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.AcceptOrderResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.acceptOrder =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/AcceptOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_AcceptOrder);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.RejectOrderRequest,
 *   !proto.brij.orders.v1.partner.RejectOrderResponse>}
 */
const methodDescriptor_PartnerService_RejectOrder = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/RejectOrder',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.RejectOrderRequest,
  proto.brij.orders.v1.partner.RejectOrderResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.RejectOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.RejectOrderResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.RejectOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.RejectOrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.RejectOrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.rejectOrder =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/RejectOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_RejectOrder,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.RejectOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.RejectOrderResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.rejectOrder =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/RejectOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_RejectOrder);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.CompleteOrderRequest,
 *   !proto.brij.orders.v1.partner.CompleteOrderResponse>}
 */
const methodDescriptor_PartnerService_CompleteOrder = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/CompleteOrder',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.CompleteOrderRequest,
  proto.brij.orders.v1.partner.CompleteOrderResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.CompleteOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.CompleteOrderResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.CompleteOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.CompleteOrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.CompleteOrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.completeOrder =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/CompleteOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_CompleteOrder,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.CompleteOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.CompleteOrderResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.completeOrder =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/CompleteOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_CompleteOrder);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.FailOrderRequest,
 *   !proto.brij.orders.v1.partner.FailOrderResponse>}
 */
const methodDescriptor_PartnerService_FailOrder = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/FailOrder',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.FailOrderRequest,
  proto.brij.orders.v1.partner.FailOrderResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.FailOrderRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.FailOrderResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.FailOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.FailOrderResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.FailOrderResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.failOrder =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/FailOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_FailOrder,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.FailOrderRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.FailOrderResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.failOrder =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/FailOrder',
      request,
      metadata || {},
      methodDescriptor_PartnerService_FailOrder);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.GetOrdersRequest,
 *   !proto.brij.orders.v1.partner.GetOrdersResponse>}
 */
const methodDescriptor_PartnerService_GetOrders = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/GetOrders',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.GetOrdersRequest,
  proto.brij.orders.v1.partner.GetOrdersResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.GetOrdersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.GetOrdersResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.GetOrdersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.GetOrdersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.GetOrdersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.getOrders =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/GetOrders',
      request,
      metadata || {},
      methodDescriptor_PartnerService_GetOrders,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.GetOrdersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.GetOrdersResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.getOrders =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/GetOrders',
      request,
      metadata || {},
      methodDescriptor_PartnerService_GetOrders);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.UpdateFeesRequest,
 *   !proto.brij.orders.v1.partner.UpdateFeesResponse>}
 */
const methodDescriptor_PartnerService_UpdateFees = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/UpdateFees',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.UpdateFeesRequest,
  proto.brij.orders.v1.partner.UpdateFeesResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.UpdateFeesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.UpdateFeesResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.UpdateFeesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.UpdateFeesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.UpdateFeesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.updateFees =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/UpdateFees',
      request,
      metadata || {},
      methodDescriptor_PartnerService_UpdateFees,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.UpdateFeesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.UpdateFeesResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.updateFees =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/UpdateFees',
      request,
      metadata || {},
      methodDescriptor_PartnerService_UpdateFees);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.brij.orders.v1.partner.GenerateTransactionRequest,
 *   !proto.brij.orders.v1.partner.GenerateTransactionResponse>}
 */
const methodDescriptor_PartnerService_GenerateTransaction = new grpc.web.MethodDescriptor(
  '/brij.orders.v1.partner.PartnerService/GenerateTransaction',
  grpc.web.MethodType.UNARY,
  proto.brij.orders.v1.partner.GenerateTransactionRequest,
  proto.brij.orders.v1.partner.GenerateTransactionResponse,
  /**
   * @param {!proto.brij.orders.v1.partner.GenerateTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.brij.orders.v1.partner.GenerateTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.brij.orders.v1.partner.GenerateTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.brij.orders.v1.partner.GenerateTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.brij.orders.v1.partner.GenerateTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.brij.orders.v1.partner.PartnerServiceClient.prototype.generateTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/GenerateTransaction',
      request,
      metadata || {},
      methodDescriptor_PartnerService_GenerateTransaction,
      callback);
};


/**
 * @param {!proto.brij.orders.v1.partner.GenerateTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.brij.orders.v1.partner.GenerateTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.brij.orders.v1.partner.PartnerServicePromiseClient.prototype.generateTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/brij.orders.v1.partner.PartnerService/GenerateTransaction',
      request,
      metadata || {},
      methodDescriptor_PartnerService_GenerateTransaction);
};


module.exports = proto.brij.orders.v1.partner;

