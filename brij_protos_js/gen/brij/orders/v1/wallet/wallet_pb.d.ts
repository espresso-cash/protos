// @generated by protoc-gen-es v2.4.0
// @generated from file brij/orders/v1/wallet/wallet.proto (package brij.orders.v1.wallet, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { RampType } from "../common/ramp_type_pb";

/**
 * Describes the file brij/orders/v1/wallet/wallet.proto.
 */
export declare const file_brij_orders_v1_wallet_wallet: GenFile;

/**
 * @generated from message brij.orders.v1.wallet.CreateOnRampOrderRequest
 */
export declare type CreateOnRampOrderRequest = Message<"brij.orders.v1.wallet.CreateOnRampOrderRequest"> & {
  /**
   * OnRampOrderUserEnvelope
   *
   * @generated from field: bytes payload = 1;
   */
  payload: Uint8Array;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;
};

/**
 * Describes the message brij.orders.v1.wallet.CreateOnRampOrderRequest.
 * Use `create(CreateOnRampOrderRequestSchema)` to create a new message.
 */
export declare const CreateOnRampOrderRequestSchema: GenMessage<CreateOnRampOrderRequest>;

/**
 * @generated from message brij.orders.v1.wallet.CreateOnRampOrderResponse
 */
export declare type CreateOnRampOrderResponse = Message<"brij.orders.v1.wallet.CreateOnRampOrderResponse"> & {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId: string;
};

/**
 * Describes the message brij.orders.v1.wallet.CreateOnRampOrderResponse.
 * Use `create(CreateOnRampOrderResponseSchema)` to create a new message.
 */
export declare const CreateOnRampOrderResponseSchema: GenMessage<CreateOnRampOrderResponse>;

/**
 * @generated from message brij.orders.v1.wallet.CreateOffRampOrderRequest
 */
export declare type CreateOffRampOrderRequest = Message<"brij.orders.v1.wallet.CreateOffRampOrderRequest"> & {
  /**
   * OffRampOrderUserEnvelope
   *
   * @generated from field: bytes payload = 1;
   */
  payload: Uint8Array;

  /**
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;
};

/**
 * Describes the message brij.orders.v1.wallet.CreateOffRampOrderRequest.
 * Use `create(CreateOffRampOrderRequestSchema)` to create a new message.
 */
export declare const CreateOffRampOrderRequestSchema: GenMessage<CreateOffRampOrderRequest>;

/**
 * @generated from message brij.orders.v1.wallet.CreateOffRampOrderResponse
 */
export declare type CreateOffRampOrderResponse = Message<"brij.orders.v1.wallet.CreateOffRampOrderResponse"> & {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId: string;
};

/**
 * Describes the message brij.orders.v1.wallet.CreateOffRampOrderResponse.
 * Use `create(CreateOffRampOrderResponseSchema)` to create a new message.
 */
export declare const CreateOffRampOrderResponseSchema: GenMessage<CreateOffRampOrderResponse>;

/**
 * @generated from message brij.orders.v1.wallet.GetOrderRequest
 */
export declare type GetOrderRequest = Message<"brij.orders.v1.wallet.GetOrderRequest"> & {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId: string;

  /**
   * @generated from field: string external_id = 2;
   */
  externalId: string;
};

/**
 * Describes the message brij.orders.v1.wallet.GetOrderRequest.
 * Use `create(GetOrderRequestSchema)` to create a new message.
 */
export declare const GetOrderRequestSchema: GenMessage<GetOrderRequest>;

/**
 * @generated from message brij.orders.v1.wallet.GetOrderResponse
 */
export declare type GetOrderResponse = Message<"brij.orders.v1.wallet.GetOrderResponse"> & {
  /**
   * OnRampOrderUserEnvelope or OffRampOrderUserEnvelope
   *
   * @generated from field: bytes user_payload = 1;
   */
  userPayload: Uint8Array;

  /**
   * @generated from field: bytes user_signature = 2;
   */
  userSignature: Uint8Array;

  /**
   * OnRampOrderPartnerEnvelope or OffRampOrderPartnerEnvelope
   *
   * @generated from field: bytes partner_payload = 3;
   */
  partnerPayload: Uint8Array;

  /**
   * @generated from field: bytes partner_signature = 4;
   */
  partnerSignature: Uint8Array;

  /**
   * @generated from field: string created = 5;
   */
  created: string;

  /**
   * @generated from field: string status = 6;
   */
  status: string;

  /**
   * @generated from field: string user_public_key = 7;
   */
  userPublicKey: string;

  /**
   * @generated from field: string partner_public_key = 8;
   */
  partnerPublicKey: string;

  /**
   * @generated from field: brij.orders.v1.common.RampType type = 9;
   */
  type: RampType;

  /**
   * @generated from field: string transaction = 10;
   */
  transaction: string;

  /**
   * @generated from field: string transaction_id = 11;
   */
  transactionId: string;
};

/**
 * Describes the message brij.orders.v1.wallet.GetOrderResponse.
 * Use `create(GetOrderResponseSchema)` to create a new message.
 */
export declare const GetOrderResponseSchema: GenMessage<GetOrderResponse>;

/**
 * @generated from message brij.orders.v1.wallet.GetOrdersRequest
 */
export declare type GetOrdersRequest = Message<"brij.orders.v1.wallet.GetOrdersRequest"> & {
};

/**
 * Describes the message brij.orders.v1.wallet.GetOrdersRequest.
 * Use `create(GetOrdersRequestSchema)` to create a new message.
 */
export declare const GetOrdersRequestSchema: GenMessage<GetOrdersRequest>;

/**
 * @generated from message brij.orders.v1.wallet.GetOrdersResponse
 */
export declare type GetOrdersResponse = Message<"brij.orders.v1.wallet.GetOrdersResponse"> & {
  /**
   * @generated from field: repeated brij.orders.v1.wallet.GetOrderResponse orders = 1;
   */
  orders: GetOrderResponse[];
};

/**
 * Describes the message brij.orders.v1.wallet.GetOrdersResponse.
 * Use `create(GetOrdersResponseSchema)` to create a new message.
 */
export declare const GetOrdersResponseSchema: GenMessage<GetOrdersResponse>;

/**
 * @generated from message brij.orders.v1.wallet.GetQuoteRequest
 */
export declare type GetQuoteRequest = Message<"brij.orders.v1.wallet.GetQuoteRequest"> & {
  /**
   * @generated from field: string partner_public_key = 1;
   */
  partnerPublicKey: string;

  /**
   * @generated from field: string wallet_public_key = 2;
   */
  walletPublicKey: string;

  /**
   * @generated from field: double crypto_amount = 3;
   */
  cryptoAmount: number;

  /**
   * @generated from field: brij.orders.v1.common.RampType ramp_type = 4;
   */
  rampType: RampType;

  /**
   * @generated from field: string fiat_currency = 5;
   */
  fiatCurrency: string;
};

/**
 * Describes the message brij.orders.v1.wallet.GetQuoteRequest.
 * Use `create(GetQuoteRequestSchema)` to create a new message.
 */
export declare const GetQuoteRequestSchema: GenMessage<GetQuoteRequest>;

/**
 * @generated from message brij.orders.v1.wallet.GetQuoteResponse
 */
export declare type GetQuoteResponse = Message<"brij.orders.v1.wallet.GetQuoteResponse"> & {
  /**
   * @generated from field: double crypto_amount = 1;
   */
  cryptoAmount: number;

  /**
   * @generated from field: double fiat_amount = 2;
   */
  fiatAmount: number;

  /**
   * @generated from field: string fiat_currency = 3;
   */
  fiatCurrency: string;

  /**
   * @generated from field: brij.orders.v1.common.RampType ramp_type = 4;
   */
  rampType: RampType;

  /**
   * @generated from field: double conversion_rate = 5;
   */
  conversionRate: number;

  /**
   * @generated from field: brij.orders.v1.wallet.RampFee partner_fee = 6;
   */
  partnerFee?: RampFee;

  /**
   * @generated from field: brij.orders.v1.wallet.RampFee wallet_fee = 7;
   */
  walletFee?: RampFee;

  /**
   * @generated from field: brij.orders.v1.wallet.RampFee platform_fee = 8;
   */
  platformFee?: RampFee;

  /**
   * @generated from field: double total_fee = 9;
   */
  totalFee: number;

  /**
   * @generated from field: double partner_amount = 10;
   */
  partnerAmount: number;

  /**
   * @generated from field: double wallet_total_fee = 11;
   */
  walletTotalFee: number;

  /**
   * @generated from field: double platform_total_fee = 12;
   */
  platformTotalFee: number;

  /**
   * @generated from field: double partner_total_fee = 13;
   */
  partnerTotalFee: number;
};

/**
 * Describes the message brij.orders.v1.wallet.GetQuoteResponse.
 * Use `create(GetQuoteResponseSchema)` to create a new message.
 */
export declare const GetQuoteResponseSchema: GenMessage<GetQuoteResponse>;

/**
 * @generated from message brij.orders.v1.wallet.GetBestQuoteRequest
 */
export declare type GetBestQuoteRequest = Message<"brij.orders.v1.wallet.GetBestQuoteRequest"> & {
  /**
   * @generated from field: string country = 1;
   */
  country: string;

  /**
   * @generated from field: string wallet_public_key = 2;
   */
  walletPublicKey: string;

  /**
   * @generated from field: double crypto_amount = 3;
   */
  cryptoAmount: number;

  /**
   * @generated from field: brij.orders.v1.common.RampType ramp_type = 4;
   */
  rampType: RampType;

  /**
   * @generated from field: string fiat_currency = 5;
   */
  fiatCurrency: string;
};

/**
 * Describes the message brij.orders.v1.wallet.GetBestQuoteRequest.
 * Use `create(GetBestQuoteRequestSchema)` to create a new message.
 */
export declare const GetBestQuoteRequestSchema: GenMessage<GetBestQuoteRequest>;

/**
 * @generated from message brij.orders.v1.wallet.GetBestQuoteResponse
 */
export declare type GetBestQuoteResponse = Message<"brij.orders.v1.wallet.GetBestQuoteResponse"> & {
  /**
   * @generated from field: double crypto_amount = 1;
   */
  cryptoAmount: number;

  /**
   * @generated from field: double fiat_amount = 2;
   */
  fiatAmount: number;

  /**
   * @generated from field: string fiat_currency = 3;
   */
  fiatCurrency: string;

  /**
   * @generated from field: brij.orders.v1.common.RampType ramp_type = 4;
   */
  rampType: RampType;

  /**
   * @generated from field: double conversion_rate = 5;
   */
  conversionRate: number;

  /**
   * @generated from field: brij.orders.v1.wallet.RampFee partner_fee = 6;
   */
  partnerFee?: RampFee;

  /**
   * @generated from field: brij.orders.v1.wallet.RampFee wallet_fee = 7;
   */
  walletFee?: RampFee;

  /**
   * @generated from field: brij.orders.v1.wallet.RampFee platform_fee = 8;
   */
  platformFee?: RampFee;

  /**
   * @generated from field: double total_fee = 9;
   */
  totalFee: number;

  /**
   * @generated from field: double partner_amount = 10;
   */
  partnerAmount: number;

  /**
   * @generated from field: double wallet_total_fee = 11;
   */
  walletTotalFee: number;

  /**
   * @generated from field: double platform_total_fee = 12;
   */
  platformTotalFee: number;

  /**
   * @generated from field: double partner_total_fee = 13;
   */
  partnerTotalFee: number;
};

/**
 * Describes the message brij.orders.v1.wallet.GetBestQuoteResponse.
 * Use `create(GetBestQuoteResponseSchema)` to create a new message.
 */
export declare const GetBestQuoteResponseSchema: GenMessage<GetBestQuoteResponse>;

/**
 * @generated from message brij.orders.v1.wallet.RampFee
 */
export declare type RampFee = Message<"brij.orders.v1.wallet.RampFee"> & {
  /**
   * @generated from field: double fixed_fee = 1;
   */
  fixedFee: number;

  /**
   * @generated from field: double percentage_fee = 2;
   */
  percentageFee: number;
};

/**
 * Describes the message brij.orders.v1.wallet.RampFee.
 * Use `create(RampFeeSchema)` to create a new message.
 */
export declare const RampFeeSchema: GenMessage<RampFee>;

/**
 * @generated from message brij.orders.v1.wallet.GenerateTransactionRequest
 */
export declare type GenerateTransactionRequest = Message<"brij.orders.v1.wallet.GenerateTransactionRequest"> & {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId: string;

  /**
   * @generated from field: string external_id = 2;
   */
  externalId: string;
};

/**
 * Describes the message brij.orders.v1.wallet.GenerateTransactionRequest.
 * Use `create(GenerateTransactionRequestSchema)` to create a new message.
 */
export declare const GenerateTransactionRequestSchema: GenMessage<GenerateTransactionRequest>;

/**
 * @generated from message brij.orders.v1.wallet.GenerateTransactionResponse
 */
export declare type GenerateTransactionResponse = Message<"brij.orders.v1.wallet.GenerateTransactionResponse"> & {
  /**
   * @generated from field: string transaction = 1;
   */
  transaction: string;
};

/**
 * Describes the message brij.orders.v1.wallet.GenerateTransactionResponse.
 * Use `create(GenerateTransactionResponseSchema)` to create a new message.
 */
export declare const GenerateTransactionResponseSchema: GenMessage<GenerateTransactionResponse>;

/**
 * @generated from service brij.orders.v1.wallet.WalletService
 */
export declare const WalletService: GenService<{
  /**
   * @generated from rpc brij.orders.v1.wallet.WalletService.CreateOnRampOrder
   */
  createOnRampOrder: {
    methodKind: "unary";
    input: typeof CreateOnRampOrderRequestSchema;
    output: typeof CreateOnRampOrderResponseSchema;
  },
  /**
   * @generated from rpc brij.orders.v1.wallet.WalletService.CreateOffRampOrder
   */
  createOffRampOrder: {
    methodKind: "unary";
    input: typeof CreateOffRampOrderRequestSchema;
    output: typeof CreateOffRampOrderResponseSchema;
  },
  /**
   * @generated from rpc brij.orders.v1.wallet.WalletService.GetOrder
   */
  getOrder: {
    methodKind: "unary";
    input: typeof GetOrderRequestSchema;
    output: typeof GetOrderResponseSchema;
  },
  /**
   * @generated from rpc brij.orders.v1.wallet.WalletService.GetOrders
   */
  getOrders: {
    methodKind: "unary";
    input: typeof GetOrdersRequestSchema;
    output: typeof GetOrdersResponseSchema;
  },
  /**
   * @generated from rpc brij.orders.v1.wallet.WalletService.GetQuote
   */
  getQuote: {
    methodKind: "unary";
    input: typeof GetQuoteRequestSchema;
    output: typeof GetQuoteResponseSchema;
  },
  /**
   * @generated from rpc brij.orders.v1.wallet.WalletService.GetBestQuote
   */
  getBestQuote: {
    methodKind: "unary";
    input: typeof GetBestQuoteRequestSchema;
    output: typeof GetBestQuoteResponseSchema;
  },
  /**
   * @generated from rpc brij.orders.v1.wallet.WalletService.GenerateTransaction
   */
  generateTransaction: {
    methodKind: "unary";
    input: typeof GenerateTransactionRequestSchema;
    output: typeof GenerateTransactionResponseSchema;
  },
}>;

