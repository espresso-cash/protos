// source: brij/verifier/v1/get_kyc_requirements.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var brij_verifier_v1_data_pb = require('../../../brij/verifier/v1/data_pb.js');
goog.object.extend(proto, brij_verifier_v1_data_pb);
goog.exportSymbol('proto.brij.verifier.v1.Formula', null, global);
goog.exportSymbol('proto.brij.verifier.v1.Formula.Condition', null, global);
goog.exportSymbol('proto.brij.verifier.v1.Formula.Condition.ValueCase', null, global);
goog.exportSymbol('proto.brij.verifier.v1.Formula.Nested', null, global);
goog.exportSymbol('proto.brij.verifier.v1.Formula.ValueCase', null, global);
goog.exportSymbol('proto.brij.verifier.v1.GetKycRequirementsRequest', null, global);
goog.exportSymbol('proto.brij.verifier.v1.GetKycRequirementsResponse', null, global);
goog.exportSymbol('proto.brij.verifier.v1.Requirement', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.brij.verifier.v1.GetKycRequirementsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.brij.verifier.v1.GetKycRequirementsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.brij.verifier.v1.GetKycRequirementsRequest.displayName = 'proto.brij.verifier.v1.GetKycRequirementsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.brij.verifier.v1.GetKycRequirementsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.brij.verifier.v1.GetKycRequirementsResponse.repeatedFields_, null);
};
goog.inherits(proto.brij.verifier.v1.GetKycRequirementsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.brij.verifier.v1.GetKycRequirementsResponse.displayName = 'proto.brij.verifier.v1.GetKycRequirementsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.brij.verifier.v1.Requirement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.brij.verifier.v1.Requirement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.brij.verifier.v1.Requirement.displayName = 'proto.brij.verifier.v1.Requirement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.brij.verifier.v1.Formula = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.brij.verifier.v1.Formula.oneofGroups_);
};
goog.inherits(proto.brij.verifier.v1.Formula, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.brij.verifier.v1.Formula.displayName = 'proto.brij.verifier.v1.Formula';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.brij.verifier.v1.Formula.Nested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.brij.verifier.v1.Formula.Nested.repeatedFields_, null);
};
goog.inherits(proto.brij.verifier.v1.Formula.Nested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.brij.verifier.v1.Formula.Nested.displayName = 'proto.brij.verifier.v1.Formula.Nested';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.brij.verifier.v1.Formula.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.brij.verifier.v1.Formula.Condition.oneofGroups_);
};
goog.inherits(proto.brij.verifier.v1.Formula.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.brij.verifier.v1.Formula.Condition.displayName = 'proto.brij.verifier.v1.Formula.Condition';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.brij.verifier.v1.GetKycRequirementsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.brij.verifier.v1.GetKycRequirementsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
country: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.brij.verifier.v1.GetKycRequirementsRequest}
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.brij.verifier.v1.GetKycRequirementsRequest;
  return proto.brij.verifier.v1.GetKycRequirementsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.brij.verifier.v1.GetKycRequirementsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.brij.verifier.v1.GetKycRequirementsRequest}
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.brij.verifier.v1.GetKycRequirementsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.brij.verifier.v1.GetKycRequirementsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.brij.verifier.v1.GetKycRequirementsRequest} returns this
 */
proto.brij.verifier.v1.GetKycRequirementsRequest.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.brij.verifier.v1.GetKycRequirementsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.brij.verifier.v1.GetKycRequirementsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
country: jspb.Message.getFieldWithDefault(msg, 1, ""),
requirementsList: jspb.Message.toObjectList(msg.getRequirementsList(),
    proto.brij.verifier.v1.Requirement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.brij.verifier.v1.GetKycRequirementsResponse}
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.brij.verifier.v1.GetKycRequirementsResponse;
  return proto.brij.verifier.v1.GetKycRequirementsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.brij.verifier.v1.GetKycRequirementsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.brij.verifier.v1.GetKycRequirementsResponse}
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 2:
      var value = new proto.brij.verifier.v1.Requirement;
      reader.readMessage(value,proto.brij.verifier.v1.Requirement.deserializeBinaryFromReader);
      msg.addRequirements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.brij.verifier.v1.GetKycRequirementsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.brij.verifier.v1.GetKycRequirementsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequirementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.brij.verifier.v1.Requirement.serializeBinaryToWriter
    );
  }
};


/**
 * optional string country = 1;
 * @return {string}
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.brij.verifier.v1.GetKycRequirementsResponse} returns this
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Requirement requirements = 2;
 * @return {!Array<!proto.brij.verifier.v1.Requirement>}
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.getRequirementsList = function() {
  return /** @type{!Array<!proto.brij.verifier.v1.Requirement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.brij.verifier.v1.Requirement, 2));
};


/**
 * @param {!Array<!proto.brij.verifier.v1.Requirement>} value
 * @return {!proto.brij.verifier.v1.GetKycRequirementsResponse} returns this
*/
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.setRequirementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.brij.verifier.v1.Requirement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.brij.verifier.v1.Requirement}
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.addRequirements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.brij.verifier.v1.Requirement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.brij.verifier.v1.GetKycRequirementsResponse} returns this
 */
proto.brij.verifier.v1.GetKycRequirementsResponse.prototype.clearRequirementsList = function() {
  return this.setRequirementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.brij.verifier.v1.Requirement.prototype.toObject = function(opt_includeInstance) {
  return proto.brij.verifier.v1.Requirement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.brij.verifier.v1.Requirement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Requirement.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
formula: (f = msg.getFormula()) && proto.brij.verifier.v1.Formula.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.brij.verifier.v1.Requirement}
 */
proto.brij.verifier.v1.Requirement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.brij.verifier.v1.Requirement;
  return proto.brij.verifier.v1.Requirement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.brij.verifier.v1.Requirement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.brij.verifier.v1.Requirement}
 */
proto.brij.verifier.v1.Requirement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.brij.verifier.v1.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.brij.verifier.v1.Formula;
      reader.readMessage(value,proto.brij.verifier.v1.Formula.deserializeBinaryFromReader);
      msg.setFormula(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.brij.verifier.v1.Requirement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.brij.verifier.v1.Requirement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.brij.verifier.v1.Requirement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Requirement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFormula();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.brij.verifier.v1.Formula.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataType type = 1;
 * @return {!proto.brij.verifier.v1.DataType}
 */
proto.brij.verifier.v1.Requirement.prototype.getType = function() {
  return /** @type {!proto.brij.verifier.v1.DataType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.brij.verifier.v1.DataType} value
 * @return {!proto.brij.verifier.v1.Requirement} returns this
 */
proto.brij.verifier.v1.Requirement.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Formula formula = 2;
 * @return {?proto.brij.verifier.v1.Formula}
 */
proto.brij.verifier.v1.Requirement.prototype.getFormula = function() {
  return /** @type{?proto.brij.verifier.v1.Formula} */ (
    jspb.Message.getWrapperField(this, proto.brij.verifier.v1.Formula, 2));
};


/**
 * @param {?proto.brij.verifier.v1.Formula|undefined} value
 * @return {!proto.brij.verifier.v1.Requirement} returns this
*/
proto.brij.verifier.v1.Requirement.prototype.setFormula = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.brij.verifier.v1.Requirement} returns this
 */
proto.brij.verifier.v1.Requirement.prototype.clearFormula = function() {
  return this.setFormula(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Requirement.prototype.hasFormula = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.brij.verifier.v1.Formula.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.brij.verifier.v1.Formula.ValueCase = {
  VALUE_NOT_SET: 0,
  AND: 1,
  OR: 2,
  NOT: 3,
  CONSTANT: 4,
  CONDITION: 5
};

/**
 * @return {proto.brij.verifier.v1.Formula.ValueCase}
 */
proto.brij.verifier.v1.Formula.prototype.getValueCase = function() {
  return /** @type {proto.brij.verifier.v1.Formula.ValueCase} */(jspb.Message.computeOneofCase(this, proto.brij.verifier.v1.Formula.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.brij.verifier.v1.Formula.prototype.toObject = function(opt_includeInstance) {
  return proto.brij.verifier.v1.Formula.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.brij.verifier.v1.Formula} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Formula.toObject = function(includeInstance, msg) {
  var f, obj = {
and: (f = msg.getAnd()) && proto.brij.verifier.v1.Formula.Nested.toObject(includeInstance, f),
or: (f = msg.getOr()) && proto.brij.verifier.v1.Formula.Nested.toObject(includeInstance, f),
not: (f = msg.getNot()) && proto.brij.verifier.v1.Formula.toObject(includeInstance, f),
constant: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
condition: (f = msg.getCondition()) && proto.brij.verifier.v1.Formula.Condition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.brij.verifier.v1.Formula}
 */
proto.brij.verifier.v1.Formula.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.brij.verifier.v1.Formula;
  return proto.brij.verifier.v1.Formula.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.brij.verifier.v1.Formula} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.brij.verifier.v1.Formula}
 */
proto.brij.verifier.v1.Formula.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.brij.verifier.v1.Formula.Nested;
      reader.readMessage(value,proto.brij.verifier.v1.Formula.Nested.deserializeBinaryFromReader);
      msg.setAnd(value);
      break;
    case 2:
      var value = new proto.brij.verifier.v1.Formula.Nested;
      reader.readMessage(value,proto.brij.verifier.v1.Formula.Nested.deserializeBinaryFromReader);
      msg.setOr(value);
      break;
    case 3:
      var value = new proto.brij.verifier.v1.Formula;
      reader.readMessage(value,proto.brij.verifier.v1.Formula.deserializeBinaryFromReader);
      msg.setNot(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConstant(value);
      break;
    case 5:
      var value = new proto.brij.verifier.v1.Formula.Condition;
      reader.readMessage(value,proto.brij.verifier.v1.Formula.Condition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.brij.verifier.v1.Formula.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.brij.verifier.v1.Formula.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.brij.verifier.v1.Formula} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Formula.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.brij.verifier.v1.Formula.Nested.serializeBinaryToWriter
    );
  }
  f = message.getOr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.brij.verifier.v1.Formula.Nested.serializeBinaryToWriter
    );
  }
  f = message.getNot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.brij.verifier.v1.Formula.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.brij.verifier.v1.Formula.Condition.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.brij.verifier.v1.Formula.Nested.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.brij.verifier.v1.Formula.Nested.prototype.toObject = function(opt_includeInstance) {
  return proto.brij.verifier.v1.Formula.Nested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.brij.verifier.v1.Formula.Nested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Formula.Nested.toObject = function(includeInstance, msg) {
  var f, obj = {
formulasList: jspb.Message.toObjectList(msg.getFormulasList(),
    proto.brij.verifier.v1.Formula.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.brij.verifier.v1.Formula.Nested}
 */
proto.brij.verifier.v1.Formula.Nested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.brij.verifier.v1.Formula.Nested;
  return proto.brij.verifier.v1.Formula.Nested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.brij.verifier.v1.Formula.Nested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.brij.verifier.v1.Formula.Nested}
 */
proto.brij.verifier.v1.Formula.Nested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.brij.verifier.v1.Formula;
      reader.readMessage(value,proto.brij.verifier.v1.Formula.deserializeBinaryFromReader);
      msg.addFormulas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.brij.verifier.v1.Formula.Nested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.brij.verifier.v1.Formula.Nested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.brij.verifier.v1.Formula.Nested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Formula.Nested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormulasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.brij.verifier.v1.Formula.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Formula formulas = 1;
 * @return {!Array<!proto.brij.verifier.v1.Formula>}
 */
proto.brij.verifier.v1.Formula.Nested.prototype.getFormulasList = function() {
  return /** @type{!Array<!proto.brij.verifier.v1.Formula>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.brij.verifier.v1.Formula, 1));
};


/**
 * @param {!Array<!proto.brij.verifier.v1.Formula>} value
 * @return {!proto.brij.verifier.v1.Formula.Nested} returns this
*/
proto.brij.verifier.v1.Formula.Nested.prototype.setFormulasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.brij.verifier.v1.Formula=} opt_value
 * @param {number=} opt_index
 * @return {!proto.brij.verifier.v1.Formula}
 */
proto.brij.verifier.v1.Formula.Nested.prototype.addFormulas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.brij.verifier.v1.Formula, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.brij.verifier.v1.Formula.Nested} returns this
 */
proto.brij.verifier.v1.Formula.Nested.prototype.clearFormulasList = function() {
  return this.setFormulasList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.brij.verifier.v1.Formula.Condition.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.brij.verifier.v1.Formula.Condition.ValueCase = {
  VALUE_NOT_SET: 0,
  COUNTRY_CODE: 1,
  DOCUMENT_TYPE: 2,
  DOCUMENT_FIELD: 3
};

/**
 * @return {proto.brij.verifier.v1.Formula.Condition.ValueCase}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.getValueCase = function() {
  return /** @type {proto.brij.verifier.v1.Formula.Condition.ValueCase} */(jspb.Message.computeOneofCase(this, proto.brij.verifier.v1.Formula.Condition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.brij.verifier.v1.Formula.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.brij.verifier.v1.Formula.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Formula.Condition.toObject = function(includeInstance, msg) {
  var f, obj = {
countryCode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
documentType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
documentField: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.brij.verifier.v1.Formula.Condition}
 */
proto.brij.verifier.v1.Formula.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.brij.verifier.v1.Formula.Condition;
  return proto.brij.verifier.v1.Formula.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.brij.verifier.v1.Formula.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.brij.verifier.v1.Formula.Condition}
 */
proto.brij.verifier.v1.Formula.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryCode(value);
      break;
    case 2:
      var value = /** @type {!proto.brij.verifier.v1.DocumentType} */ (reader.readEnum());
      msg.setDocumentType(value);
      break;
    case 3:
      var value = /** @type {!proto.brij.verifier.v1.DocumentFieldType} */ (reader.readEnum());
      msg.setDocumentField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.brij.verifier.v1.Formula.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.brij.verifier.v1.Formula.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.brij.verifier.v1.Formula.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.brij.verifier.v1.DocumentType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.brij.verifier.v1.DocumentFieldType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string country_code = 1;
 * @return {string}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.getCountryCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.brij.verifier.v1.Formula.Condition} returns this
 */
proto.brij.verifier.v1.Formula.Condition.prototype.setCountryCode = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.brij.verifier.v1.Formula.Condition.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula.Condition} returns this
 */
proto.brij.verifier.v1.Formula.Condition.prototype.clearCountryCode = function() {
  return jspb.Message.setOneofField(this, 1, proto.brij.verifier.v1.Formula.Condition.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.hasCountryCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DocumentType document_type = 2;
 * @return {!proto.brij.verifier.v1.DocumentType}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.getDocumentType = function() {
  return /** @type {!proto.brij.verifier.v1.DocumentType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.brij.verifier.v1.DocumentType} value
 * @return {!proto.brij.verifier.v1.Formula.Condition} returns this
 */
proto.brij.verifier.v1.Formula.Condition.prototype.setDocumentType = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.brij.verifier.v1.Formula.Condition.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula.Condition} returns this
 */
proto.brij.verifier.v1.Formula.Condition.prototype.clearDocumentType = function() {
  return jspb.Message.setOneofField(this, 2, proto.brij.verifier.v1.Formula.Condition.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.hasDocumentType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DocumentFieldType document_field = 3;
 * @return {!proto.brij.verifier.v1.DocumentFieldType}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.getDocumentField = function() {
  return /** @type {!proto.brij.verifier.v1.DocumentFieldType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.brij.verifier.v1.DocumentFieldType} value
 * @return {!proto.brij.verifier.v1.Formula.Condition} returns this
 */
proto.brij.verifier.v1.Formula.Condition.prototype.setDocumentField = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.brij.verifier.v1.Formula.Condition.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula.Condition} returns this
 */
proto.brij.verifier.v1.Formula.Condition.prototype.clearDocumentField = function() {
  return jspb.Message.setOneofField(this, 3, proto.brij.verifier.v1.Formula.Condition.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.Condition.prototype.hasDocumentField = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Nested and = 1;
 * @return {?proto.brij.verifier.v1.Formula.Nested}
 */
proto.brij.verifier.v1.Formula.prototype.getAnd = function() {
  return /** @type{?proto.brij.verifier.v1.Formula.Nested} */ (
    jspb.Message.getWrapperField(this, proto.brij.verifier.v1.Formula.Nested, 1));
};


/**
 * @param {?proto.brij.verifier.v1.Formula.Nested|undefined} value
 * @return {!proto.brij.verifier.v1.Formula} returns this
*/
proto.brij.verifier.v1.Formula.prototype.setAnd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.brij.verifier.v1.Formula.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula} returns this
 */
proto.brij.verifier.v1.Formula.prototype.clearAnd = function() {
  return this.setAnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.prototype.hasAnd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Nested or = 2;
 * @return {?proto.brij.verifier.v1.Formula.Nested}
 */
proto.brij.verifier.v1.Formula.prototype.getOr = function() {
  return /** @type{?proto.brij.verifier.v1.Formula.Nested} */ (
    jspb.Message.getWrapperField(this, proto.brij.verifier.v1.Formula.Nested, 2));
};


/**
 * @param {?proto.brij.verifier.v1.Formula.Nested|undefined} value
 * @return {!proto.brij.verifier.v1.Formula} returns this
*/
proto.brij.verifier.v1.Formula.prototype.setOr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.brij.verifier.v1.Formula.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula} returns this
 */
proto.brij.verifier.v1.Formula.prototype.clearOr = function() {
  return this.setOr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.prototype.hasOr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Formula not = 3;
 * @return {?proto.brij.verifier.v1.Formula}
 */
proto.brij.verifier.v1.Formula.prototype.getNot = function() {
  return /** @type{?proto.brij.verifier.v1.Formula} */ (
    jspb.Message.getWrapperField(this, proto.brij.verifier.v1.Formula, 3));
};


/**
 * @param {?proto.brij.verifier.v1.Formula|undefined} value
 * @return {!proto.brij.verifier.v1.Formula} returns this
*/
proto.brij.verifier.v1.Formula.prototype.setNot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.brij.verifier.v1.Formula.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula} returns this
 */
proto.brij.verifier.v1.Formula.prototype.clearNot = function() {
  return this.setNot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.prototype.hasNot = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool constant = 4;
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.prototype.getConstant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.brij.verifier.v1.Formula} returns this
 */
proto.brij.verifier.v1.Formula.prototype.setConstant = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.brij.verifier.v1.Formula.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula} returns this
 */
proto.brij.verifier.v1.Formula.prototype.clearConstant = function() {
  return jspb.Message.setOneofField(this, 4, proto.brij.verifier.v1.Formula.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.prototype.hasConstant = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Condition condition = 5;
 * @return {?proto.brij.verifier.v1.Formula.Condition}
 */
proto.brij.verifier.v1.Formula.prototype.getCondition = function() {
  return /** @type{?proto.brij.verifier.v1.Formula.Condition} */ (
    jspb.Message.getWrapperField(this, proto.brij.verifier.v1.Formula.Condition, 5));
};


/**
 * @param {?proto.brij.verifier.v1.Formula.Condition|undefined} value
 * @return {!proto.brij.verifier.v1.Formula} returns this
*/
proto.brij.verifier.v1.Formula.prototype.setCondition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.brij.verifier.v1.Formula.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.brij.verifier.v1.Formula} returns this
 */
proto.brij.verifier.v1.Formula.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.brij.verifier.v1.Formula.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.brij.verifier.v1);
