syntax = "proto3";

package brij.orders.v1.partner;

import "brij/orders/v1/common/ramp_type.proto";

option go_package = "go.brij.fi/protos/brij/orders/v1/partner";

service PartnerService {
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);

  rpc AcceptOrder(AcceptOrderRequest) returns (AcceptOrderResponse);

  rpc RejectOrder(RejectOrderRequest) returns (RejectOrderResponse);

  rpc CompleteOrder(CompleteOrderRequest) returns (CompleteOrderResponse);

  rpc FailOrder(FailOrderRequest) returns (FailOrderResponse);

  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);

  rpc UpdateFees(UpdateFeesRequest) returns (UpdateFeesResponse);

  rpc GenerateTransaction(GenerateTransactionRequest) returns (GenerateTransactionResponse);
}

message GetOrderRequest {
  string order_id = 1;
  string external_id = 2;
}

message GetOrderResponse {
  // OnRampOrderUserEnvelope or OffRampOrderUserEnvelope
  bytes user_payload = 1;
  bytes user_signature = 2;
  // OnRampOrderPartnerEnvelope or OffRampOrderPartnerEnvelope
  bytes partner_payload = 3;
  bytes partner_signature = 4;
  string created = 5;
  string status = 6;
  string user_public_key = 7;
  string partner_public_key = 8;
  brij.orders.v1.common.RampType type = 9;
  string transaction = 10;
  string transaction_id = 11;
  string external_id = 12;
}

message AcceptOrderRequest {
  // OnRampOrderPartnerEnvelope or OffRampOrderPartnerEnvelope
  bytes payload = 1;
  bytes signature = 2;
  string external_id = 3;
  string order_id = 4;
}

message AcceptOrderResponse {}

message RejectOrderRequest {
  string order_id = 1;
  string reason = 2;
}

message RejectOrderResponse {}

message CompleteOrderRequest {
  string order_id = 1;
  string transaction_id = 2;
  string external_id = 3;
}

message CompleteOrderResponse {}

message FailOrderRequest {
  string order_id = 1;
  string reason = 2;
  string external_id = 3;
}

message FailOrderResponse {}

message GetOrdersRequest {}

message GetOrdersResponse {
  repeated GetOrderResponse orders = 1;
}

message UpdateFeesRequest {
  RampFeeUpdateData on_ramp_fee = 1;
  RampFeeUpdateData off_ramp_fee = 2;
  string wallet_address = 3;
}

message RampFeeUpdateData {
  double fixed_fee = 1;
  double percentage_fee = 2;
  ConversionRate conversion_rates = 3;
}

message ConversionRate {
  string crypto_currency = 1;
  string fiat_currency = 2;
  double rate = 3;
}

message UpdateFeesResponse {}

message GenerateTransactionRequest {
  string order_id = 1;
  string funding_wallet_address = 2;
  string external_id = 3;
}

message GenerateTransactionResponse {
  string transaction = 1;
  string reference = 2;
}
