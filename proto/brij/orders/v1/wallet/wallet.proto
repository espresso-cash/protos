syntax = "proto3";

package brij.orders.v1.wallet;

import "brij/orders/v1/common/ramp_type.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "go.brij.fi/protos/brij/orders/v1/wallet";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {key: "bearer"}
  }
};

service WalletService {
  rpc CreateOnRampOrder(CreateOnRampOrderRequest) returns (CreateOnRampOrderResponse) {
    option (google.api.http) = {
      post: "/v1/wallet/createOnRampOrder"
      body: "*"
    };
  }

  rpc CreateOffRampOrder(CreateOffRampOrderRequest) returns (CreateOffRampOrderResponse) {
    option (google.api.http) = {
      post: "/v1/wallet/createOffRampOrder"
      body: "*"
    };
  }

  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {
    option (google.api.http) = {
      post: "/v1/wallet/getOrder"
      body: "*"
    };
  }

  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {
    option (google.api.http) = {
      post: "/v1/wallet/getOrders"
      body: "*"
    };
  }

  rpc GetQuote(GetQuoteRequest) returns (GetQuoteResponse) {
    option (google.api.http) = {
      post: "/v1/wallet/getQuote"
      body: "*"
    };
  }

  rpc GenerateTransaction(GenerateTransactionRequest) returns (GenerateTransactionResponse) {
    option (google.api.http) = {
      post: "/v1/wallet/generateTransaction"
      body: "*"
    };
  }
}

message CreateOnRampOrderRequest {
  string order_id = 1;
  string partner_public_key = 2;
  double crypto_amount = 3;
  string crypto_currency = 4;
  double fiat_amount = 5;
  string fiat_currency = 6;
  string user_signature = 7;
  string user_wallet_address = 8;
  string wallet_public_key = 9;
}

message CreateOnRampOrderResponse {
  string order_id = 1;
}

message CreateOffRampOrderRequest {
  string order_id = 1;
  string partner_public_key = 2;
  double crypto_amount = 3;
  string crypto_currency = 4;
  double fiat_amount = 5;
  string fiat_currency = 6;
  string bank_name = 7;
  string bank_account = 8;
  string user_signature = 9;
  string user_wallet_address = 10;
  string wallet_public_key = 11;
}

message CreateOffRampOrderResponse {
  string order_id = 1;
}

message GetOrderRequest {
  string order_id = 1;
  string external_id = 2;
}

message GetOrderResponse {
  string order_id = 1;
  string created = 2;
  string status = 3;
  string partner_public_key = 4;
  string user_public_key = 5;
  string comment = 7;
  brij.orders.v1.common.RampType type = 8;
  double crypto_amount = 9;
  string crypto_currency = 10;
  double fiat_amount = 11;
  string fiat_currency = 12;
  string bank_name = 13;
  string bank_account = 14;
  string crypto_wallet_address = 15;
  string transaction = 16;
  string transaction_id = 17;
  string user_signature = 19;
  string partner_signature = 20;
  string user_wallet_address = 21;
  string wallet_public_key = 22;
}

message GetOrdersRequest {}

message GetOrdersResponse {
  repeated GetOrderResponse orders = 1;
}

message GetQuoteRequest {
  string partner_public_key = 1;
  string wallet_public_key = 2;
  double crypto_amount = 3;
  brij.orders.v1.common.RampType ramp_type = 4;
  string fiat_currency = 5;
}

message GetQuoteResponse {
  double crypto_amount = 1;
  double fiat_amount = 2;
  string fiat_currency = 3;
  brij.orders.v1.common.RampType ramp_type = 4;
  double conversion_rate = 5;
  RampFee partner_fee = 6;
  RampFee wallet_fee = 7;
  RampFee platform_fee = 8;
  double total_fee = 9;
}

message RampFee {
  double fixed_fee = 1;
  double percentage_fee = 2;
}

message GenerateTransactionRequest {
  string order_id = 1;
  string external_id = 2;
}

message GenerateTransactionResponse {
  string transaction = 1;
}
