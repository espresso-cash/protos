syntax = "proto3";

package brij.orders.v1.wallet;

import "brij/orders/v1/common/ramp_type.proto";

option go_package = "go.brij.fi/protos/brij/orders/v1/wallet";

service WalletService {
  rpc CreateOnRampOrder(CreateOnRampOrderRequest) returns (CreateOnRampOrderResponse);

  rpc CreateOffRampOrder(CreateOffRampOrderRequest) returns (CreateOffRampOrderResponse);

  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);

  rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse);

  rpc GetQuote(GetQuoteRequest) returns (GetQuoteResponse);

  rpc GetBestQuote(GetBestQuoteRequest) returns (GetBestQuoteResponse);

  rpc GenerateTransaction(GenerateTransactionRequest) returns (GenerateTransactionResponse);
}

message CreateOnRampOrderRequest {
  // OnRampOrderUserEnvelope
  bytes payload = 1;
  bytes signature = 2;
}

message CreateOnRampOrderResponse {
  string order_id = 1;
}

message CreateOffRampOrderRequest {
  // OffRampOrderUserEnvelope
  bytes payload = 1;
  bytes signature = 2;
}

message CreateOffRampOrderResponse {
  string order_id = 1;
}

message GetOrderRequest {
  string order_id = 1;
}

message GetOrderResponse {
  // OnRampOrderUserEnvelope or OffRampOrderUserEnvelope
  bytes user_payload = 1;
  bytes user_signature = 2;
  // OnRampOrderPartnerEnvelope or OffRampOrderPartnerEnvelope
  bytes partner_payload = 3;
  bytes partner_signature = 4;
  string created = 5;
  string status = 6;
  string user_public_key = 7;
  string partner_public_key = 8;
  brij.orders.v1.common.RampType type = 9;
  string transaction = 10;
  string transaction_id = 11;
}

message GetOrdersRequest {}

message GetOrdersResponse {
  repeated GetOrderResponse orders = 1;
}

message GetQuoteRequest {
  string partner_public_key = 1;
  string wallet_public_key = 2;
  double crypto_amount = 3;
  brij.orders.v1.common.RampType ramp_type = 4;
  string fiat_currency = 5;
}

message Quote {
  double crypto_amount = 1;
  double fiat_amount = 2;
  string fiat_currency = 3;
  brij.orders.v1.common.RampType ramp_type = 4;
  double conversion_rate = 5;
  RampFee partner_fee = 6;
  RampFee wallet_fee = 7;
  RampFee platform_fee = 8;
  double total_fee = 9;
  double partner_amount = 10;
  double wallet_total_fee = 11;
  double platform_total_fee = 12;
  double partner_total_fee = 13;
  string platform_fee_address = 14;
  string partner_public_key = 15;
  string wallet_public_key = 16;
}

message GetQuoteResponse {
  Quote quote = 1;
}

message GetBestQuoteRequest {
  string country = 1;
  string wallet_public_key = 2;
  double crypto_amount = 3;
  brij.orders.v1.common.RampType ramp_type = 4;
  string fiat_currency = 5;
}

message GetBestQuoteResponse {
  Quote quote = 1;
}

message RampFee {
  double fixed_fee = 1;
  double percentage_fee = 2;
}

message GenerateTransactionRequest {
  string order_id = 1;
  string fee_payer_address = 2;
}

message GenerateTransactionResponse {
  string transaction = 1;
  string reference = 2;
}
